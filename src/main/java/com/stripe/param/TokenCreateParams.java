// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiRequestParams;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.Getter;

@Getter
public class TokenCreateParams extends ApiRequestParams {
  /** The account information to be stored in this token. */
  @SerializedName("account")
  Account account;

  @SerializedName("amount")
  Long amount;

  /** The bank account this token will represent. */
  @SerializedName("bank_account")
  Object bankAccount;

  @SerializedName("card")
  Object card;

  @SerializedName("currency")
  String currency;

  /**
   * The customer (owned by the application's account) for which to create a token. For use only
   * with [Stripe Connect](/docs/connect). Also, this can be used only with an [OAuth access
   * token](/docs/connect/standard-accounts) or [Stripe-Account
   * header](/docs/connect/authentication). For more details, see [Shared
   * Customers](/docs/connect/shared-customers).
   */
  @SerializedName("customer")
  String customer;

  @SerializedName("email")
  String email;

  /** Specifies which fields in the response should be expanded. */
  @SerializedName("expand")
  List<String> expand;

  @SerializedName("external_id")
  String externalId;

  @SerializedName("iovation_blackbox")
  String iovationBlackbox;

  @SerializedName("ip")
  String ip;

  @SerializedName("payment_user_agent")
  String paymentUserAgent;

  @SerializedName("pii")
  Pii pii;

  @SerializedName("recipient")
  String recipient;

  @SerializedName("referrer")
  String referrer;

  @SerializedName("request_id")
  String requestId;

  @SerializedName("user_agent")
  String userAgent;

  @SerializedName("validation_type")
  ValidationType validationType;

  private TokenCreateParams(
      Account account,
      Long amount,
      Object bankAccount,
      Object card,
      String currency,
      String customer,
      String email,
      List<String> expand,
      String externalId,
      String iovationBlackbox,
      String ip,
      String paymentUserAgent,
      Pii pii,
      String recipient,
      String referrer,
      String requestId,
      String userAgent,
      ValidationType validationType) {
    this.account = account;
    this.amount = amount;
    this.bankAccount = bankAccount;
    this.card = card;
    this.currency = currency;
    this.customer = customer;
    this.email = email;
    this.expand = expand;
    this.externalId = externalId;
    this.iovationBlackbox = iovationBlackbox;
    this.ip = ip;
    this.paymentUserAgent = paymentUserAgent;
    this.pii = pii;
    this.recipient = recipient;
    this.referrer = referrer;
    this.requestId = requestId;
    this.userAgent = userAgent;
    this.validationType = validationType;
  }

  public static Builder builder() {
    return new com.stripe.param.TokenCreateParams.Builder();
  }

  public static class Builder {
    private Account account;

    private Long amount;

    private Object bankAccount;

    private Object card;

    private String currency;

    private String customer;

    private String email;

    private List<String> expand;

    private String externalId;

    private String iovationBlackbox;

    private String ip;

    private String paymentUserAgent;

    private Pii pii;

    private String recipient;

    private String referrer;

    private String requestId;

    private String userAgent;

    private ValidationType validationType;

    /** Finalize and obtain parameter instance from this builder. */
    public TokenCreateParams build() {
      return new TokenCreateParams(
          this.account,
          this.amount,
          this.bankAccount,
          this.card,
          this.currency,
          this.customer,
          this.email,
          this.expand,
          this.externalId,
          this.iovationBlackbox,
          this.ip,
          this.paymentUserAgent,
          this.pii,
          this.recipient,
          this.referrer,
          this.requestId,
          this.userAgent,
          this.validationType);
    }

    /**
     * Add an element to `expand` list. A list is initialized for the first call, and subsequent
     * calls adds additional elements to the original list. See {@link TokenCreateParams#expand} for
     * the field documentation.
     */
    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    /** The account information to be stored in this token. */
    public Builder setAccount(Account account) {
      this.account = account;
      return this;
    }

    public Builder setAmount(Long amount) {
      this.amount = amount;
      return this;
    }

    /** The bank account this token will represent. */
    public Builder setBankAccount(String bankAccount) {
      this.bankAccount = bankAccount;
      return this;
    }

    /** The bank account this token will represent. */
    public Builder setBankAccount(Map<String, Object> bankAccount) {
      this.bankAccount = bankAccount;
      return this;
    }

    public Builder setCard(CardApplePay card) {
      this.card = card;
      return this;
    }

    public Builder setCard(CardCreditCard card) {
      this.card = card;
      return this;
    }

    public Builder setCard(CardEncryptedCard card) {
      this.card = card;
      return this;
    }

    public Builder setCard(CardSwipeData card) {
      this.card = card;
      return this;
    }

    public Builder setCard(String card) {
      this.card = card;
      return this;
    }

    public Builder setCurrency(String currency) {
      this.currency = currency;
      return this;
    }

    /**
     * The customer (owned by the application's account) for which to create a token. For use only
     * with [Stripe Connect](/docs/connect). Also, this can be used only with an [OAuth access
     * token](/docs/connect/standard-accounts) or [Stripe-Account
     * header](/docs/connect/authentication). For more details, see [Shared
     * Customers](/docs/connect/shared-customers).
     */
    public Builder setCustomer(String customer) {
      this.customer = customer;
      return this;
    }

    public Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    public Builder setExternalId(String externalId) {
      this.externalId = externalId;
      return this;
    }

    public Builder setIovationBlackbox(String iovationBlackbox) {
      this.iovationBlackbox = iovationBlackbox;
      return this;
    }

    public Builder setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public Builder setPaymentUserAgent(String paymentUserAgent) {
      this.paymentUserAgent = paymentUserAgent;
      return this;
    }

    public Builder setPii(Pii pii) {
      this.pii = pii;
      return this;
    }

    public Builder setRecipient(String recipient) {
      this.recipient = recipient;
      return this;
    }

    public Builder setReferrer(String referrer) {
      this.referrer = referrer;
      return this;
    }

    public Builder setRequestId(String requestId) {
      this.requestId = requestId;
      return this;
    }

    public Builder setUserAgent(String userAgent) {
      this.userAgent = userAgent;
      return this;
    }

    public Builder setValidationType(ValidationType validationType) {
      this.validationType = validationType;
      return this;
    }
  }

  @Getter
  public static class Account {
    /** A hash of information about the account. */
    @SerializedName("legal_entity")
    LegalEntity legalEntity;

    /**
     * A Boolean value indicating that the user described by the data in the token has been shown
     * [the Stripe Connected Account
     * Agreement](/docs/connect/account-tokens#stripe-connected-account-agreement). When creating an
     * account token to create a new Connect account, this value must be `true`.
     */
    @SerializedName("tos_shown_and_accepted")
    Boolean tosShownAndAccepted;

    private Account(LegalEntity legalEntity, Boolean tosShownAndAccepted) {
      this.legalEntity = legalEntity;
      this.tosShownAndAccepted = tosShownAndAccepted;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.Account.Builder();
    }

    public static class Builder {
      private LegalEntity legalEntity;

      private Boolean tosShownAndAccepted;

      /** Finalize and obtain parameter instance from this builder. */
      public Account build() {
        return new Account(this.legalEntity, this.tosShownAndAccepted);
      }

      /** A hash of information about the account. */
      public Builder setLegalEntity(LegalEntity legalEntity) {
        this.legalEntity = legalEntity;
        return this;
      }

      /**
       * A Boolean value indicating that the user described by the data in the token has been shown
       * [the Stripe Connected Account
       * Agreement](/docs/connect/account-tokens#stripe-connected-account-agreement). When creating
       * an account token to create a new Connect account, this value must be `true`.
       */
      public Builder setTosShownAndAccepted(Boolean tosShownAndAccepted) {
        this.tosShownAndAccepted = tosShownAndAccepted;
        return this;
      }
    }

    @Getter
    public static class LegalEntity {
      /**
       * Information about anyone *besides* the account representative who owns at least 25% of the
       * legal entity. This field is required only for Singapore, Hong Kong, and
       * [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) member countries. For
       * details, see our [Handling Identity Verification with the
       * API](/docs/connect/identity-verification-api#additional-owners) documentation.
       */
      @SerializedName("additional_owners")
      Object additionalOwners;

      /** The address of the legal entity (i.e., individual or company). */
      @SerializedName("address")
      Address address;

      /** The Kana address variation for the legal entity (Japan only). */
      @SerializedName("address_kana")
      AddressKana addressKana;

      /** The Kanji address variation for the legal entity (Japan only). */
      @SerializedName("address_kanji")
      AddressKanji addressKanji;

      /** The legal name of the entity (companies only). */
      @SerializedName("business_name")
      String businessName;

      /** The Kana legal name variation for the company (Japan-based companies only). */
      @SerializedName("business_name_kana")
      String businessNameKana;

      /** The Kanji legal name variation for the company (Japan-based companies only). */
      @SerializedName("business_name_kanji")
      String businessNameKanji;

      /**
       * The business ID number of the legal entity (companies only), as appropriate for the
       * company’s country. (Examples are an Employer ID Number in the U.S., a Business Number in
       * Canada, or a Company Number in the UK.)
       */
      @SerializedName("business_tax_id")
      String businessTaxId;

      /** The VAT number of the legal entity (companies only). */
      @SerializedName("business_vat_id")
      String businessVatId;

      /**
       * The account representative's date of birth. Note that you must provide the entire date of
       * birth at the same time. You cannot, for example, provide only the year without also
       * providing the month and day.
       */
      @SerializedName("dob")
      Dob dob;

      /** The account representative's first name. */
      @SerializedName("first_name")
      String firstName;

      /** The Kana variation of the account representative's first name (Japan only). */
      @SerializedName("first_name_kana")
      String firstNameKana;

      /** The Kanji variation of the account representative's first name (Japan only). */
      @SerializedName("first_name_kanji")
      String firstNameKanji;

      /**
       * The gender of the account representative. Can be `male` or `female` (by international
       * regulations).
       */
      @SerializedName("gender")
      String gender;

      /** The account representative's last name. */
      @SerializedName("last_name")
      String lastName;

      /** The Kana varation of the account representative's last name (Japan only). */
      @SerializedName("last_name_kana")
      String lastNameKana;

      /** The Kanji varation of the account representative's last name (Japan only). */
      @SerializedName("last_name_kanji")
      String lastNameKanji;

      /** The account representative's maiden name. */
      @SerializedName("maiden_name")
      String maidenName;

      /** The account representative's personal address, used for verification. */
      @SerializedName("personal_address")
      PersonalAddress personalAddress;

      /**
       * The Kana address variation for the account representative, used for verification (Japan
       * only).
       */
      @SerializedName("personal_address_kana")
      PersonalAddressKana personalAddressKana;

      /**
       * The Kanji address variation for the account representative, used for verification (Japan
       * only).
       */
      @SerializedName("personal_address_kanji")
      PersonalAddressKanji personalAddressKanji;

      /**
       * The government-issued ID number of the account representative, as appropriate for the
       * representative’s country. (Examples are a Social Security Number in the U.S., or a Social
       * Insurance Number in Canada). Instead of the number itself, you can also provide a [PII
       * token created with Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).
       */
      @SerializedName("personal_id_number")
      String personalIdNumber;

      /** The legal entity's phone number, used for verification. */
      @SerializedName("phone_number")
      String phoneNumber;

      /**
       * The last four digits of the account representative's Social Security Number (U.S. only).
       */
      @SerializedName("ssn_last_4")
      String ssnLast4;

      /**
       * The jurisdiction in which the `business_tax_id` is registered (Germany-based companies
       * only).
       */
      @SerializedName("tax_id_registrar")
      String taxIdRegistrar;

      /** The legal entity type. Can be `individual` or `company`. */
      @SerializedName("type")
      String type;

      /** Information on the verification state of the account representative. */
      @SerializedName("verification")
      Verification verification;

      private LegalEntity(
          Object additionalOwners,
          Address address,
          AddressKana addressKana,
          AddressKanji addressKanji,
          String businessName,
          String businessNameKana,
          String businessNameKanji,
          String businessTaxId,
          String businessVatId,
          Dob dob,
          String firstName,
          String firstNameKana,
          String firstNameKanji,
          String gender,
          String lastName,
          String lastNameKana,
          String lastNameKanji,
          String maidenName,
          PersonalAddress personalAddress,
          PersonalAddressKana personalAddressKana,
          PersonalAddressKanji personalAddressKanji,
          String personalIdNumber,
          String phoneNumber,
          String ssnLast4,
          String taxIdRegistrar,
          String type,
          Verification verification) {
        this.additionalOwners = additionalOwners;
        this.address = address;
        this.addressKana = addressKana;
        this.addressKanji = addressKanji;
        this.businessName = businessName;
        this.businessNameKana = businessNameKana;
        this.businessNameKanji = businessNameKanji;
        this.businessTaxId = businessTaxId;
        this.businessVatId = businessVatId;
        this.dob = dob;
        this.firstName = firstName;
        this.firstNameKana = firstNameKana;
        this.firstNameKanji = firstNameKanji;
        this.gender = gender;
        this.lastName = lastName;
        this.lastNameKana = lastNameKana;
        this.lastNameKanji = lastNameKanji;
        this.maidenName = maidenName;
        this.personalAddress = personalAddress;
        this.personalAddressKana = personalAddressKana;
        this.personalAddressKanji = personalAddressKanji;
        this.personalIdNumber = personalIdNumber;
        this.phoneNumber = phoneNumber;
        this.ssnLast4 = ssnLast4;
        this.taxIdRegistrar = taxIdRegistrar;
        this.type = type;
        this.verification = verification;
      }

      public static Builder builder() {
        return new com.stripe.param.TokenCreateParams.Account.LegalEntity.Builder();
      }

      public static class Builder {
        private Object additionalOwners;

        private Address address;

        private AddressKana addressKana;

        private AddressKanji addressKanji;

        private String businessName;

        private String businessNameKana;

        private String businessNameKanji;

        private String businessTaxId;

        private String businessVatId;

        private Dob dob;

        private String firstName;

        private String firstNameKana;

        private String firstNameKanji;

        private String gender;

        private String lastName;

        private String lastNameKana;

        private String lastNameKanji;

        private String maidenName;

        private PersonalAddress personalAddress;

        private PersonalAddressKana personalAddressKana;

        private PersonalAddressKanji personalAddressKanji;

        private String personalIdNumber;

        private String phoneNumber;

        private String ssnLast4;

        private String taxIdRegistrar;

        private String type;

        private Verification verification;

        /** Finalize and obtain parameter instance from this builder. */
        public LegalEntity build() {
          return new LegalEntity(
              this.additionalOwners,
              this.address,
              this.addressKana,
              this.addressKanji,
              this.businessName,
              this.businessNameKana,
              this.businessNameKanji,
              this.businessTaxId,
              this.businessVatId,
              this.dob,
              this.firstName,
              this.firstNameKana,
              this.firstNameKanji,
              this.gender,
              this.lastName,
              this.lastNameKana,
              this.lastNameKanji,
              this.maidenName,
              this.personalAddress,
              this.personalAddressKana,
              this.personalAddressKanji,
              this.personalIdNumber,
              this.phoneNumber,
              this.ssnLast4,
              this.taxIdRegistrar,
              this.type,
              this.verification);
        }

        /**
         * Information about anyone *besides* the account representative who owns at least 25% of
         * the legal entity. This field is required only for Singapore, Hong Kong, and
         * [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) member countries. For
         * details, see our [Handling Identity Verification with the
         * API](/docs/connect/identity-verification-api#additional-owners) documentation.
         */
        public Builder setAdditionalOwners(List<AccountOwner> additionalOwners) {
          this.additionalOwners = additionalOwners;
          return this;
        }

        /**
         * Information about anyone *besides* the account representative who owns at least 25% of
         * the legal entity. This field is required only for Singapore, Hong Kong, and
         * [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) member countries. For
         * details, see our [Handling Identity Verification with the
         * API](/docs/connect/identity-verification-api#additional-owners) documentation.
         */
        public Builder setAdditionalOwners(Map<String, AccountOwner> additionalOwners) {
          this.additionalOwners = additionalOwners;
          return this;
        }

        /** The Kana address variation for the legal entity (Japan only). */
        public Builder setAddressKana(AddressKana addressKana) {
          this.addressKana = addressKana;
          return this;
        }

        /** The Kanji address variation for the legal entity (Japan only). */
        public Builder setAddressKanji(AddressKanji addressKanji) {
          this.addressKanji = addressKanji;
          return this;
        }

        /** The address of the legal entity (i.e., individual or company). */
        public Builder setAddress(Address address) {
          this.address = address;
          return this;
        }

        /** The Kana legal name variation for the company (Japan-based companies only). */
        public Builder setBusinessNameKana(String businessNameKana) {
          this.businessNameKana = businessNameKana;
          return this;
        }

        /** The Kanji legal name variation for the company (Japan-based companies only). */
        public Builder setBusinessNameKanji(String businessNameKanji) {
          this.businessNameKanji = businessNameKanji;
          return this;
        }

        /** The legal name of the entity (companies only). */
        public Builder setBusinessName(String businessName) {
          this.businessName = businessName;
          return this;
        }

        /**
         * The business ID number of the legal entity (companies only), as appropriate for the
         * company’s country. (Examples are an Employer ID Number in the U.S., a Business Number in
         * Canada, or a Company Number in the UK.)
         */
        public Builder setBusinessTaxId(String businessTaxId) {
          this.businessTaxId = businessTaxId;
          return this;
        }

        /** The VAT number of the legal entity (companies only). */
        public Builder setBusinessVatId(String businessVatId) {
          this.businessVatId = businessVatId;
          return this;
        }

        /**
         * The account representative's date of birth. Note that you must provide the entire date of
         * birth at the same time. You cannot, for example, provide only the year without also
         * providing the month and day.
         */
        public Builder setDob(Dob dob) {
          this.dob = dob;
          return this;
        }

        /** The Kana variation of the account representative's first name (Japan only). */
        public Builder setFirstNameKana(String firstNameKana) {
          this.firstNameKana = firstNameKana;
          return this;
        }

        /** The Kanji variation of the account representative's first name (Japan only). */
        public Builder setFirstNameKanji(String firstNameKanji) {
          this.firstNameKanji = firstNameKanji;
          return this;
        }

        /** The account representative's first name. */
        public Builder setFirstName(String firstName) {
          this.firstName = firstName;
          return this;
        }

        /**
         * The gender of the account representative. Can be `male` or `female` (by international
         * regulations).
         */
        public Builder setGender(String gender) {
          this.gender = gender;
          return this;
        }

        /** The Kana varation of the account representative's last name (Japan only). */
        public Builder setLastNameKana(String lastNameKana) {
          this.lastNameKana = lastNameKana;
          return this;
        }

        /** The Kanji varation of the account representative's last name (Japan only). */
        public Builder setLastNameKanji(String lastNameKanji) {
          this.lastNameKanji = lastNameKanji;
          return this;
        }

        /** The account representative's last name. */
        public Builder setLastName(String lastName) {
          this.lastName = lastName;
          return this;
        }

        /** The account representative's maiden name. */
        public Builder setMaidenName(String maidenName) {
          this.maidenName = maidenName;
          return this;
        }

        /**
         * The Kana address variation for the account representative, used for verification (Japan
         * only).
         */
        public Builder setPersonalAddressKana(PersonalAddressKana personalAddressKana) {
          this.personalAddressKana = personalAddressKana;
          return this;
        }

        /**
         * The Kanji address variation for the account representative, used for verification (Japan
         * only).
         */
        public Builder setPersonalAddressKanji(PersonalAddressKanji personalAddressKanji) {
          this.personalAddressKanji = personalAddressKanji;
          return this;
        }

        /** The account representative's personal address, used for verification. */
        public Builder setPersonalAddress(PersonalAddress personalAddress) {
          this.personalAddress = personalAddress;
          return this;
        }

        /**
         * The government-issued ID number of the account representative, as appropriate for the
         * representative’s country. (Examples are a Social Security Number in the U.S., or a Social
         * Insurance Number in Canada). Instead of the number itself, you can also provide a [PII
         * token created with Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).
         */
        public Builder setPersonalIdNumber(String personalIdNumber) {
          this.personalIdNumber = personalIdNumber;
          return this;
        }

        /** The legal entity's phone number, used for verification. */
        public Builder setPhoneNumber(String phoneNumber) {
          this.phoneNumber = phoneNumber;
          return this;
        }

        /**
         * The last four digits of the account representative's Social Security Number (U.S. only).
         */
        public Builder setSsnLast4(String ssnLast4) {
          this.ssnLast4 = ssnLast4;
          return this;
        }

        /**
         * The jurisdiction in which the `business_tax_id` is registered (Germany-based companies
         * only).
         */
        public Builder setTaxIdRegistrar(String taxIdRegistrar) {
          this.taxIdRegistrar = taxIdRegistrar;
          return this;
        }

        /** The legal entity type. Can be `individual` or `company`. */
        public Builder setType(String type) {
          this.type = type;
          return this;
        }

        /** Information on the verification state of the account representative. */
        public Builder setVerification(Verification verification) {
          this.verification = verification;
          return this;
        }
      }

      @Getter
      public static class AccountOwner {
        /** The personal address of the owner, used for verification. */
        @SerializedName("address")
        Address address;

        /**
         * The owner's date of birth. Note that you must provide the entire date of birth at the
         * same time. You cannot, for example, provide only the year without also providing month
         * and day.
         */
        @SerializedName("dob")
        Dob dob;

        /** The owner's email. */
        @SerializedName("email")
        String email;

        /** The owner's first name. */
        @SerializedName("first_name")
        String firstName;

        /** The owner's last name. */
        @SerializedName("last_name")
        String lastName;

        /** The owner's maiden name. */
        @SerializedName("maiden_name")
        String maidenName;

        /**
         * The government-issued ID number of the account representative, as appropriate for the
         * representative’s country. (Examples are a Social Security Number in the U.S., or a Social
         * Insurance Number in Canada).
         */
        @SerializedName("personal_id_number")
        String personalIdNumber;

        /** The owner's phone number. */
        @SerializedName("phone")
        String phone;

        /** The last 4 digits of the owner's social security number. */
        @SerializedName("ssn_last_4")
        String ssnLast4;

        /**
         * Information on the verification state of the owner, including what information is needed
         * and by when.
         */
        @SerializedName("verification")
        Verification verification;

        private AccountOwner(
            Address address,
            Dob dob,
            String email,
            String firstName,
            String lastName,
            String maidenName,
            String personalIdNumber,
            String phone,
            String ssnLast4,
            Verification verification) {
          this.address = address;
          this.dob = dob;
          this.email = email;
          this.firstName = firstName;
          this.lastName = lastName;
          this.maidenName = maidenName;
          this.personalIdNumber = personalIdNumber;
          this.phone = phone;
          this.ssnLast4 = ssnLast4;
          this.verification = verification;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.AccountOwner.Builder();
        }

        public static class Builder {
          private Address address;

          private Dob dob;

          private String email;

          private String firstName;

          private String lastName;

          private String maidenName;

          private String personalIdNumber;

          private String phone;

          private String ssnLast4;

          private Verification verification;

          /** Finalize and obtain parameter instance from this builder. */
          public AccountOwner build() {
            return new AccountOwner(
                this.address,
                this.dob,
                this.email,
                this.firstName,
                this.lastName,
                this.maidenName,
                this.personalIdNumber,
                this.phone,
                this.ssnLast4,
                this.verification);
          }

          /** The personal address of the owner, used for verification. */
          public Builder setAddress(Address address) {
            this.address = address;
            return this;
          }

          /**
           * The owner's date of birth. Note that you must provide the entire date of birth at the
           * same time. You cannot, for example, provide only the year without also providing month
           * and day.
           */
          public Builder setDob(Dob dob) {
            this.dob = dob;
            return this;
          }

          /** The owner's email. */
          public Builder setEmail(String email) {
            this.email = email;
            return this;
          }

          /** The owner's first name. */
          public Builder setFirstName(String firstName) {
            this.firstName = firstName;
            return this;
          }

          /** The owner's last name. */
          public Builder setLastName(String lastName) {
            this.lastName = lastName;
            return this;
          }

          /** The owner's maiden name. */
          public Builder setMaidenName(String maidenName) {
            this.maidenName = maidenName;
            return this;
          }

          /**
           * The government-issued ID number of the account representative, as appropriate for the
           * representative’s country. (Examples are a Social Security Number in the U.S., or a
           * Social Insurance Number in Canada).
           */
          public Builder setPersonalIdNumber(String personalIdNumber) {
            this.personalIdNumber = personalIdNumber;
            return this;
          }

          /** The owner's phone number. */
          public Builder setPhone(String phone) {
            this.phone = phone;
            return this;
          }

          /** The last 4 digits of the owner's social security number. */
          public Builder setSsnLast4(String ssnLast4) {
            this.ssnLast4 = ssnLast4;
            return this;
          }

          /**
           * Information on the verification state of the owner, including what information is
           * needed and by when.
           */
          public Builder setVerification(Verification verification) {
            this.verification = verification;
            return this;
          }
        }

        @Getter
        public static class Address {
          /** City, district, suburb, town, or village. */
          @SerializedName("city")
          String city;

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          @SerializedName("country")
          String country;

          /** Address line 1 (e.g., street, PO Box, or company name). */
          @SerializedName("line1")
          String line1;

          /** Address line 2 (e.g., apartment, suite, unit, or building). */
          @SerializedName("line2")
          String line2;

          /** ZIP or postal code. */
          @SerializedName("postal_code")
          String postalCode;

          /** State, county, province, or region. */
          @SerializedName("state")
          String state;

          private Address(
              String city,
              String country,
              String line1,
              String line2,
              String postalCode,
              String state) {
            this.city = city;
            this.country = country;
            this.line1 = line1;
            this.line2 = line2;
            this.postalCode = postalCode;
            this.state = state;
          }

          public static Builder builder() {
            return new com.stripe.param.TokenCreateParams.Account.LegalEntity.AccountOwner.Address
                .Builder();
          }

          public static class Builder {
            private String city;

            private String country;

            private String line1;

            private String line2;

            private String postalCode;

            private String state;

            /** Finalize and obtain parameter instance from this builder. */
            public Address build() {
              return new Address(
                  this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
            }

            /** City, district, suburb, town, or village. */
            public Builder setCity(String city) {
              this.city = city;
              return this;
            }

            /**
             * Two-letter country code ([ISO 3166-1
             * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             */
            public Builder setCountry(String country) {
              this.country = country;
              return this;
            }

            /** Address line 1 (e.g., street, PO Box, or company name). */
            public Builder setLine1(String line1) {
              this.line1 = line1;
              return this;
            }

            /** Address line 2 (e.g., apartment, suite, unit, or building). */
            public Builder setLine2(String line2) {
              this.line2 = line2;
              return this;
            }

            /** ZIP or postal code. */
            public Builder setPostalCode(String postalCode) {
              this.postalCode = postalCode;
              return this;
            }

            /** State, county, province, or region. */
            public Builder setState(String state) {
              this.state = state;
              return this;
            }
          }
        }

        @Getter
        public static class Dob {
          /** The day of birth, between 1 and 31. */
          @SerializedName("day")
          Long day;

          /** The month of birth, between 1 and 12. */
          @SerializedName("month")
          Long month;

          /** The four-digit year of birth. */
          @SerializedName("year")
          Long year;

          private Dob(Long day, Long month, Long year) {
            this.day = day;
            this.month = month;
            this.year = year;
          }

          public static Builder builder() {
            return new com.stripe.param.TokenCreateParams.Account.LegalEntity.AccountOwner.Dob
                .Builder();
          }

          public static class Builder {
            private Long day;

            private Long month;

            private Long year;

            /** Finalize and obtain parameter instance from this builder. */
            public Dob build() {
              return new Dob(this.day, this.month, this.year);
            }

            /** The day of birth, between 1 and 31. */
            public Builder setDay(Long day) {
              this.day = day;
              return this;
            }

            /** The month of birth, between 1 and 12. */
            public Builder setMonth(Long month) {
              this.month = month;
              return this;
            }

            /** The four-digit year of birth. */
            public Builder setYear(Long year) {
              this.year = year;
              return this;
            }
          }
        }

        @Getter
        public static class Verification {
          /**
           * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a
           * [file upload](#create_file) with a `purpose` value of `identity_document`.
           */
          @SerializedName("document")
          String document;

          /** The verification status of the provided ID. */
          @SerializedName("status")
          Status status;

          private Verification(String document, Status status) {
            this.document = document;
            this.status = status;
          }

          public static Builder builder() {
            return new com.stripe.param.TokenCreateParams.Account.LegalEntity.AccountOwner
                .Verification.Builder();
          }

          public static class Builder {
            private String document;

            private Status status;

            /** Finalize and obtain parameter instance from this builder. */
            public Verification build() {
              return new Verification(this.document, this.status);
            }

            /**
             * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a
             * [file upload](#create_file) with a `purpose` value of `identity_document`.
             */
            public Builder setDocument(String document) {
              this.document = document;
              return this;
            }

            /** The verification status of the provided ID. */
            public Builder setStatus(Status status) {
              this.status = status;
              return this;
            }
          }

          public enum Status implements ApiRequestParams.Enum {
            @SerializedName("")
            EMPTY(""),

            @SerializedName("pending")
            PENDING("pending"),

            @SerializedName("unverified")
            UNVERIFIED("unverified"),

            @SerializedName("verified")
            VERIFIED("verified");

            @Getter private final String value;

            Status(String value) {
              this.value = value;
            }
          }
        }
      }

      @Getter
      public static class Address {
        /** City, district, suburb, town, or village. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Address line 1 (e.g., street, PO Box, or company name). */
        @SerializedName("line1")
        String line1;

        /** Address line 2 (e.g., apartment, suite, unit, or building). */
        @SerializedName("line2")
        String line2;

        /** ZIP or postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** State, county, province, or region. */
        @SerializedName("state")
        String state;

        private Address(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.Address.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          /** Finalize and obtain parameter instance from this builder. */
          public Address build() {
            return new Address(
                this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
          }

          /** City, district, suburb, town, or village. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Address line 1 (e.g., street, PO Box, or company name). */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Address line 2 (e.g., apartment, suite, unit, or building). */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** ZIP or postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** State, county, province, or region. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }
        }
      }

      @Getter
      public static class AddressKana {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private AddressKana(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.AddressKana.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public AddressKana build() {
            return new AddressKana(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }

      @Getter
      public static class AddressKanji {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private AddressKanji(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.AddressKanji.Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public AddressKanji build() {
            return new AddressKanji(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }

      @Getter
      public static class Dob {
        /** The day of birth, between 1 and 31. */
        @SerializedName("day")
        Long day;

        /** The month of birth, between 1 and 12. */
        @SerializedName("month")
        Long month;

        /** The four-digit year of birth. */
        @SerializedName("year")
        Long year;

        private Dob(Long day, Long month, Long year) {
          this.day = day;
          this.month = month;
          this.year = year;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.Dob.Builder();
        }

        public static class Builder {
          private Long day;

          private Long month;

          private Long year;

          /** Finalize and obtain parameter instance from this builder. */
          public Dob build() {
            return new Dob(this.day, this.month, this.year);
          }

          /** The day of birth, between 1 and 31. */
          public Builder setDay(Long day) {
            this.day = day;
            return this;
          }

          /** The month of birth, between 1 and 12. */
          public Builder setMonth(Long month) {
            this.month = month;
            return this;
          }

          /** The four-digit year of birth. */
          public Builder setYear(Long year) {
            this.year = year;
            return this;
          }
        }
      }

      @Getter
      public static class PersonalAddress {
        /** City, district, suburb, town, or village. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Address line 1 (e.g., street, PO Box, or company name). */
        @SerializedName("line1")
        String line1;

        /** Address line 2 (e.g., apartment, suite, unit, or building). */
        @SerializedName("line2")
        String line2;

        /** ZIP or postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** State, county, province, or region. */
        @SerializedName("state")
        String state;

        private PersonalAddress(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.PersonalAddress
              .Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          /** Finalize and obtain parameter instance from this builder. */
          public PersonalAddress build() {
            return new PersonalAddress(
                this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
          }

          /** City, district, suburb, town, or village. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Address line 1 (e.g., street, PO Box, or company name). */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Address line 2 (e.g., apartment, suite, unit, or building). */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** ZIP or postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** State, county, province, or region. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }
        }
      }

      @Getter
      public static class PersonalAddressKana {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private PersonalAddressKana(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.PersonalAddressKana
              .Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public PersonalAddressKana build() {
            return new PersonalAddressKana(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }

      @Getter
      public static class PersonalAddressKanji {
        /** City or ward. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Block or building number. */
        @SerializedName("line1")
        String line1;

        /** Building details. */
        @SerializedName("line2")
        String line2;

        /** Postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** Prefecture. */
        @SerializedName("state")
        String state;

        /** Town or cho-me. */
        @SerializedName("town")
        String town;

        private PersonalAddressKanji(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state,
            String town) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
          this.town = town;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.PersonalAddressKanji
              .Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          private String town;

          /** Finalize and obtain parameter instance from this builder. */
          public PersonalAddressKanji build() {
            return new PersonalAddressKanji(
                this.city,
                this.country,
                this.line1,
                this.line2,
                this.postalCode,
                this.state,
                this.town);
          }

          /** City or ward. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Block or building number. */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Building details. */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** Postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** Prefecture. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }

          /** Town or cho-me. */
          public Builder setTown(String town) {
            this.town = town;
            return this;
          }
        }
      }

      @Getter
      public static class Verification {
        /**
         * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a [file
         * upload](#create_file) with a `purpose` value of `identity_document`.
         */
        @SerializedName("document")
        String document;

        /** The verification status of the provided ID. */
        @SerializedName("status")
        Status status;

        private Verification(String document, Status status) {
          this.document = document;
          this.status = status;
        }

        public static Builder builder() {
          return new com.stripe.param.TokenCreateParams.Account.LegalEntity.Verification.Builder();
        }

        public static class Builder {
          private String document;

          private Status status;

          /** Finalize and obtain parameter instance from this builder. */
          public Verification build() {
            return new Verification(this.document, this.status);
          }

          /**
           * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a
           * [file upload](#create_file) with a `purpose` value of `identity_document`.
           */
          public Builder setDocument(String document) {
            this.document = document;
            return this;
          }

          /** The verification status of the provided ID. */
          public Builder setStatus(Status status) {
            this.status = status;
            return this;
          }
        }

        public enum Status implements ApiRequestParams.Enum {
          @SerializedName("")
          EMPTY(""),

          @SerializedName("pending")
          PENDING("pending"),

          @SerializedName("unverified")
          UNVERIFIED("unverified"),

          @SerializedName("verified")
          VERIFIED("verified");

          @Getter private final String value;

          Status(String value) {
            this.value = value;
          }
        }
      }
    }
  }

  @Getter
  public static class CardApplePay {
    @SerializedName("address_city")
    String addressCity;

    @SerializedName("address_country")
    String addressCountry;

    @SerializedName("address_line1")
    String addressLine1;

    @SerializedName("address_line2")
    String addressLine2;

    @SerializedName("address_state")
    String addressState;

    @SerializedName("address_zip")
    String addressZip;

    @SerializedName("name")
    String name;

    @SerializedName("object")
    Object object;

    @SerializedName("pk_token")
    String pkToken;

    @SerializedName("token_cryptogram")
    String tokenCryptogram;

    @SerializedName("token_cryptogram_amount")
    Long tokenCryptogramAmount;

    @SerializedName("token_cryptogram_currency")
    String tokenCryptogramCurrency;

    @SerializedName("token_cryptogram_requestor")
    String tokenCryptogramRequestor;

    @SerializedName("token_cryptogram_used")
    Boolean tokenCryptogramUsed;

    private CardApplePay(
        String addressCity,
        String addressCountry,
        String addressLine1,
        String addressLine2,
        String addressState,
        String addressZip,
        String name,
        Object object,
        String pkToken,
        String tokenCryptogram,
        Long tokenCryptogramAmount,
        String tokenCryptogramCurrency,
        String tokenCryptogramRequestor,
        Boolean tokenCryptogramUsed) {
      this.addressCity = addressCity;
      this.addressCountry = addressCountry;
      this.addressLine1 = addressLine1;
      this.addressLine2 = addressLine2;
      this.addressState = addressState;
      this.addressZip = addressZip;
      this.name = name;
      this.object = object;
      this.pkToken = pkToken;
      this.tokenCryptogram = tokenCryptogram;
      this.tokenCryptogramAmount = tokenCryptogramAmount;
      this.tokenCryptogramCurrency = tokenCryptogramCurrency;
      this.tokenCryptogramRequestor = tokenCryptogramRequestor;
      this.tokenCryptogramUsed = tokenCryptogramUsed;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.CardApplePay.Builder();
    }

    public static class Builder {
      private String addressCity;

      private String addressCountry;

      private String addressLine1;

      private String addressLine2;

      private String addressState;

      private String addressZip;

      private String name;

      private Object object;

      private String pkToken;

      private String tokenCryptogram;

      private Long tokenCryptogramAmount;

      private String tokenCryptogramCurrency;

      private String tokenCryptogramRequestor;

      private Boolean tokenCryptogramUsed;

      /** Finalize and obtain parameter instance from this builder. */
      public CardApplePay build() {
        return new CardApplePay(
            this.addressCity,
            this.addressCountry,
            this.addressLine1,
            this.addressLine2,
            this.addressState,
            this.addressZip,
            this.name,
            this.object,
            this.pkToken,
            this.tokenCryptogram,
            this.tokenCryptogramAmount,
            this.tokenCryptogramCurrency,
            this.tokenCryptogramRequestor,
            this.tokenCryptogramUsed);
      }

      public Builder setAddressCity(String addressCity) {
        this.addressCity = addressCity;
        return this;
      }

      public Builder setAddressCountry(String addressCountry) {
        this.addressCountry = addressCountry;
        return this;
      }

      public Builder setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
      }

      public Builder setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
        return this;
      }

      public Builder setAddressState(String addressState) {
        this.addressState = addressState;
        return this;
      }

      public Builder setAddressZip(String addressZip) {
        this.addressZip = addressZip;
        return this;
      }

      public Builder setName(String name) {
        this.name = name;
        return this;
      }

      public Builder setObject(Object object) {
        this.object = object;
        return this;
      }

      public Builder setPkToken(String pkToken) {
        this.pkToken = pkToken;
        return this;
      }

      public Builder setTokenCryptogramAmount(Long tokenCryptogramAmount) {
        this.tokenCryptogramAmount = tokenCryptogramAmount;
        return this;
      }

      public Builder setTokenCryptogramCurrency(String tokenCryptogramCurrency) {
        this.tokenCryptogramCurrency = tokenCryptogramCurrency;
        return this;
      }

      public Builder setTokenCryptogramRequestor(String tokenCryptogramRequestor) {
        this.tokenCryptogramRequestor = tokenCryptogramRequestor;
        return this;
      }

      public Builder setTokenCryptogramUsed(Boolean tokenCryptogramUsed) {
        this.tokenCryptogramUsed = tokenCryptogramUsed;
        return this;
      }

      public Builder setTokenCryptogram(String tokenCryptogram) {
        this.tokenCryptogram = tokenCryptogram;
        return this;
      }
    }

    public enum Object implements ApiRequestParams.Enum {
      @SerializedName("card")
      CARD("card");

      @Getter private final String value;

      Object(String value) {
        this.value = value;
      }
    }
  }

  @Getter
  public static class CardCreditCard {
    @SerializedName("address_city")
    String addressCity;

    @SerializedName("address_country")
    String addressCountry;

    @SerializedName("address_line1")
    String addressLine1;

    @SerializedName("address_line2")
    String addressLine2;

    @SerializedName("address_state")
    String addressState;

    @SerializedName("address_zip")
    String addressZip;

    @SerializedName("card_type")
    String cardType;

    @SerializedName("currency")
    String currency;

    @SerializedName("customer")
    String customer;

    @SerializedName("default_for_currency")
    Boolean defaultForCurrency;

    @SerializedName("exp_month")
    String expMonth;

    @SerializedName("exp_year")
    String expYear;

    @SerializedName("last4")
    String last4;

    @SerializedName("metadata")
    Map<String, String> metadata;

    @SerializedName("name")
    String name;

    @SerializedName("number")
    String number;

    @SerializedName("number_looks_valid")
    Boolean numberLooksValid;

    @SerializedName("number_luhn_valid")
    Boolean numberLuhnValid;

    @SerializedName("object")
    Object object;

    @SerializedName("3d_secure")
    ThreeDSecure threeDSecure;

    @SerializedName("tokenization_method")
    String tokenizationMethod;

    private CardCreditCard(
        String addressCity,
        String addressCountry,
        String addressLine1,
        String addressLine2,
        String addressState,
        String addressZip,
        String cardType,
        String currency,
        String customer,
        Boolean defaultForCurrency,
        String expMonth,
        String expYear,
        String last4,
        Map<String, String> metadata,
        String name,
        String number,
        Boolean numberLooksValid,
        Boolean numberLuhnValid,
        Object object,
        ThreeDSecure threeDSecure,
        String tokenizationMethod) {
      this.addressCity = addressCity;
      this.addressCountry = addressCountry;
      this.addressLine1 = addressLine1;
      this.addressLine2 = addressLine2;
      this.addressState = addressState;
      this.addressZip = addressZip;
      this.cardType = cardType;
      this.currency = currency;
      this.customer = customer;
      this.defaultForCurrency = defaultForCurrency;
      this.expMonth = expMonth;
      this.expYear = expYear;
      this.last4 = last4;
      this.metadata = metadata;
      this.name = name;
      this.number = number;
      this.numberLooksValid = numberLooksValid;
      this.numberLuhnValid = numberLuhnValid;
      this.object = object;
      this.threeDSecure = threeDSecure;
      this.tokenizationMethod = tokenizationMethod;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.CardCreditCard.Builder();
    }

    public static class Builder {
      private String addressCity;

      private String addressCountry;

      private String addressLine1;

      private String addressLine2;

      private String addressState;

      private String addressZip;

      private String cardType;

      private String currency;

      private String customer;

      private Boolean defaultForCurrency;

      private String expMonth;

      private String expYear;

      private String last4;

      private Map<String, String> metadata;

      private String name;

      private String number;

      private Boolean numberLooksValid;

      private Boolean numberLuhnValid;

      private Object object;

      private ThreeDSecure threeDSecure;

      private String tokenizationMethod;

      /** Finalize and obtain parameter instance from this builder. */
      public CardCreditCard build() {
        return new CardCreditCard(
            this.addressCity,
            this.addressCountry,
            this.addressLine1,
            this.addressLine2,
            this.addressState,
            this.addressZip,
            this.cardType,
            this.currency,
            this.customer,
            this.defaultForCurrency,
            this.expMonth,
            this.expYear,
            this.last4,
            this.metadata,
            this.name,
            this.number,
            this.numberLooksValid,
            this.numberLuhnValid,
            this.object,
            this.threeDSecure,
            this.tokenizationMethod);
      }

      /**
       * Add a key/value pair to `metadata` map. A map is initialized for the first call, and
       * subsequent calls adds additional key/value pairs to the original map. See {@link
       * CardCreditCard#metadata} for the field documentation.
       */
      public Builder putMetadata(String key, String value) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.put(key, value);
        return this;
      }

      public Builder setAddressCity(String addressCity) {
        this.addressCity = addressCity;
        return this;
      }

      public Builder setAddressCountry(String addressCountry) {
        this.addressCountry = addressCountry;
        return this;
      }

      public Builder setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
      }

      public Builder setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
        return this;
      }

      public Builder setAddressState(String addressState) {
        this.addressState = addressState;
        return this;
      }

      public Builder setAddressZip(String addressZip) {
        this.addressZip = addressZip;
        return this;
      }

      public Builder setCardType(String cardType) {
        this.cardType = cardType;
        return this;
      }

      public Builder setCurrency(String currency) {
        this.currency = currency;
        return this;
      }

      public Builder setCustomer(String customer) {
        this.customer = customer;
        return this;
      }

      public Builder setDefaultForCurrency(Boolean defaultForCurrency) {
        this.defaultForCurrency = defaultForCurrency;
        return this;
      }

      public Builder setExpMonth(String expMonth) {
        this.expMonth = expMonth;
        return this;
      }

      public Builder setExpYear(String expYear) {
        this.expYear = expYear;
        return this;
      }

      public Builder setLast4(String last4) {
        this.last4 = last4;
        return this;
      }

      public Builder setName(String name) {
        this.name = name;
        return this;
      }

      public Builder setNumberLooksValid(Boolean numberLooksValid) {
        this.numberLooksValid = numberLooksValid;
        return this;
      }

      public Builder setNumberLuhnValid(Boolean numberLuhnValid) {
        this.numberLuhnValid = numberLuhnValid;
        return this;
      }

      public Builder setNumber(String number) {
        this.number = number;
        return this;
      }

      public Builder setObject(Object object) {
        this.object = object;
        return this;
      }

      public Builder setThreeDSecure(ThreeDSecure threeDSecure) {
        this.threeDSecure = threeDSecure;
        return this;
      }

      public Builder setTokenizationMethod(String tokenizationMethod) {
        this.tokenizationMethod = tokenizationMethod;
        return this;
      }
    }

    @Getter
    public static class ThreeDSecure {
      @SerializedName("amount")
      Long amount;

      @SerializedName("currency")
      String currency;

      @SerializedName("preference")
      Preference preference;

      @SerializedName("return_url")
      String returnUrl;

      private ThreeDSecure(Long amount, String currency, Preference preference, String returnUrl) {
        this.amount = amount;
        this.currency = currency;
        this.preference = preference;
        this.returnUrl = returnUrl;
      }

      public static Builder builder() {
        return new com.stripe.param.TokenCreateParams.CardCreditCard.ThreeDSecure.Builder();
      }

      public static class Builder {
        private Long amount;

        private String currency;

        private Preference preference;

        private String returnUrl;

        /** Finalize and obtain parameter instance from this builder. */
        public ThreeDSecure build() {
          return new ThreeDSecure(this.amount, this.currency, this.preference, this.returnUrl);
        }

        public Builder setAmount(Long amount) {
          this.amount = amount;
          return this;
        }

        public Builder setCurrency(String currency) {
          this.currency = currency;
          return this;
        }

        public Builder setPreference(Preference preference) {
          this.preference = preference;
          return this;
        }

        public Builder setReturnUrl(String returnUrl) {
          this.returnUrl = returnUrl;
          return this;
        }
      }

      public enum Preference implements ApiRequestParams.Enum {
        @SerializedName("always")
        ALWAYS("always"),

        @SerializedName("only_if_required")
        ONLY_IF_REQUIRED("only_if_required");

        @Getter private final String value;

        Preference(String value) {
          this.value = value;
        }
      }
    }

    public enum Object implements ApiRequestParams.Enum {
      @SerializedName("card")
      CARD("card");

      @Getter private final String value;

      Object(String value) {
        this.value = value;
      }
    }
  }

  @Getter
  public static class CardEncryptedCard {
    @SerializedName("encrypted")
    String encrypted;

    private CardEncryptedCard(String encrypted) {
      this.encrypted = encrypted;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.CardEncryptedCard.Builder();
    }

    public static class Builder {
      private String encrypted;

      /** Finalize and obtain parameter instance from this builder. */
      public CardEncryptedCard build() {
        return new CardEncryptedCard(this.encrypted);
      }

      public Builder setEncrypted(String encrypted) {
        this.encrypted = encrypted;
        return this;
      }
    }
  }

  @Getter
  public static class CardSwipeData {
    @SerializedName("cvc")
    String cvc;

    @SerializedName("swipe_data")
    String swipeData;

    private CardSwipeData(String cvc, String swipeData) {
      this.cvc = cvc;
      this.swipeData = swipeData;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.CardSwipeData.Builder();
    }

    public static class Builder {
      private String cvc;

      private String swipeData;

      /** Finalize and obtain parameter instance from this builder. */
      public CardSwipeData build() {
        return new CardSwipeData(this.cvc, this.swipeData);
      }

      public Builder setCvc(String cvc) {
        this.cvc = cvc;
        return this;
      }

      public Builder setSwipeData(String swipeData) {
        this.swipeData = swipeData;
        return this;
      }
    }
  }

  @Getter
  public static class Pii {
    @SerializedName("personal_id_number")
    String personalIdNumber;

    @SerializedName("ssn_last_4")
    String ssnLast4;

    @SerializedName("tax_id")
    String taxId;

    private Pii(String personalIdNumber, String ssnLast4, String taxId) {
      this.personalIdNumber = personalIdNumber;
      this.ssnLast4 = ssnLast4;
      this.taxId = taxId;
    }

    public static Builder builder() {
      return new com.stripe.param.TokenCreateParams.Pii.Builder();
    }

    public static class Builder {
      private String personalIdNumber;

      private String ssnLast4;

      private String taxId;

      /** Finalize and obtain parameter instance from this builder. */
      public Pii build() {
        return new Pii(this.personalIdNumber, this.ssnLast4, this.taxId);
      }

      public Builder setPersonalIdNumber(String personalIdNumber) {
        this.personalIdNumber = personalIdNumber;
        return this;
      }

      public Builder setSsnLast4(String ssnLast4) {
        this.ssnLast4 = ssnLast4;
        return this;
      }

      public Builder setTaxId(String taxId) {
        this.taxId = taxId;
        return this;
      }
    }
  }

  public enum ValidationType implements ApiRequestParams.Enum {
    @SerializedName("amount")
    AMOUNT("amount"),

    @SerializedName("card")
    CARD("card"),

    @SerializedName("none")
    NONE("none");

    @Getter private final String value;

    ValidationType(String value) {
      this.value = value;
    }
  }
}
