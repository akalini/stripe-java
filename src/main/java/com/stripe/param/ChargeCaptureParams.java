// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiRequestParams;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;

@Getter
public class ChargeCaptureParams extends ApiRequestParams {
  /**
   * The amount to capture, which must be less than or equal to the original amount. Any additional
   * amount will be automatically refunded.
   */
  @SerializedName("amount")
  Long amount;

  /** An application fee to add on to this charge. Can only be used with Stripe Connect. */
  @SerializedName("application_fee")
  Long applicationFee;

  /**
   * An application fee amount to add on to this charge, which must be less than or equal to the
   * original amount. Can only be used with Stripe Connect.
   */
  @SerializedName("application_fee_amount")
  Long applicationFeeAmount;

  /**
   * An optional dictionary containing a new destination amount to use. Can only be used with
   * destination charges created with Stripe Connect.
   */
  @SerializedName("destination")
  Destination destination;

  /** Specifies which fields in the response should be expanded. */
  @SerializedName("expand")
  List<String> expand;

  /**
   * The email address to send this charge's receipt to. This will override the previously-specified
   * email address for this charge, if one was set. Receipts will not be sent in test mode.
   */
  @SerializedName("receipt_email")
  String receiptEmail;

  /**
   * An arbitrary string to be displayed on your customer's credit card statement. This may be up to
   * *22 characters*. As an example, if your website is `RunClub` and the item you're charging for
   * is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket`.
   * The statement description must contain at least one letter, may not include `"'` characters,
   * and will appear on your customer's statement in capital letters. Non-ASCII characters are
   * automatically stripped. Updating this value will overwrite the previous statement descriptor of
   * this charge. While most banks display this information consistently, some may display it
   * incorrectly or not at all.
   */
  @SerializedName("statement_descriptor")
  String statementDescriptor;

  /**
   * A string that identifies this transaction as part of a group. `transfer_group` may only be
   * provided if it has not been set. See the [Connect
   * documentation](/docs/connect/charges-transfers#grouping-transactions) for details.
   */
  @SerializedName("transfer_group")
  String transferGroup;

  private ChargeCaptureParams(
      Long amount,
      Long applicationFee,
      Long applicationFeeAmount,
      Destination destination,
      List<String> expand,
      String receiptEmail,
      String statementDescriptor,
      String transferGroup) {
    this.amount = amount;
    this.applicationFee = applicationFee;
    this.applicationFeeAmount = applicationFeeAmount;
    this.destination = destination;
    this.expand = expand;
    this.receiptEmail = receiptEmail;
    this.statementDescriptor = statementDescriptor;
    this.transferGroup = transferGroup;
  }

  public static Builder builder() {
    return new com.stripe.param.ChargeCaptureParams.Builder();
  }

  public static class Builder {
    private Long amount;

    private Long applicationFee;

    private Long applicationFeeAmount;

    private Destination destination;

    private List<String> expand;

    private String receiptEmail;

    private String statementDescriptor;

    private String transferGroup;

    /** Finalize and obtain parameter instance from this builder. */
    public ChargeCaptureParams build() {
      return new ChargeCaptureParams(
          this.amount,
          this.applicationFee,
          this.applicationFeeAmount,
          this.destination,
          this.expand,
          this.receiptEmail,
          this.statementDescriptor,
          this.transferGroup);
    }

    /**
     * Add an element to `expand` list. A list is initialized for the first call, and subsequent
     * calls adds additional elements to the original list. See {@link ChargeCaptureParams#expand}
     * for the field documentation.
     */
    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    /**
     * The amount to capture, which must be less than or equal to the original amount. Any
     * additional amount will be automatically refunded.
     */
    public Builder setAmount(Long amount) {
      this.amount = amount;
      return this;
    }

    /**
     * An application fee amount to add on to this charge, which must be less than or equal to the
     * original amount. Can only be used with Stripe Connect.
     */
    public Builder setApplicationFeeAmount(Long applicationFeeAmount) {
      this.applicationFeeAmount = applicationFeeAmount;
      return this;
    }

    /** An application fee to add on to this charge. Can only be used with Stripe Connect. */
    public Builder setApplicationFee(Long applicationFee) {
      this.applicationFee = applicationFee;
      return this;
    }

    /**
     * An optional dictionary containing a new destination amount to use. Can only be used with
     * destination charges created with Stripe Connect.
     */
    public Builder setDestination(Destination destination) {
      this.destination = destination;
      return this;
    }

    /**
     * The email address to send this charge's receipt to. This will override the
     * previously-specified email address for this charge, if one was set. Receipts will not be sent
     * in test mode.
     */
    public Builder setReceiptEmail(String receiptEmail) {
      this.receiptEmail = receiptEmail;
      return this;
    }

    /**
     * An arbitrary string to be displayed on your customer's credit card statement. This may be up
     * to *22 characters*. As an example, if your website is `RunClub` and the item you're charging
     * for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race
     * ticket`. The statement description must contain at least one letter, may not include `"'`
     * characters, and will appear on your customer's statement in capital letters. Non-ASCII
     * characters are automatically stripped. Updating this value will overwrite the previous
     * statement descriptor of this charge. While most banks display this information consistently,
     * some may display it incorrectly or not at all.
     */
    public Builder setStatementDescriptor(String statementDescriptor) {
      this.statementDescriptor = statementDescriptor;
      return this;
    }

    /**
     * A string that identifies this transaction as part of a group. `transfer_group` may only be
     * provided if it has not been set. See the [Connect
     * documentation](/docs/connect/charges-transfers#grouping-transactions) for details.
     */
    public Builder setTransferGroup(String transferGroup) {
      this.transferGroup = transferGroup;
      return this;
    }
  }

  @Getter
  public static class Destination {
    /**
     * The portion of this charge to send to the destination account. Must be less than or equal to
     * the captured amount of the charge.
     */
    @SerializedName("amount")
    Long amount;

    private Destination(Long amount) {
      this.amount = amount;
    }

    public static Builder builder() {
      return new com.stripe.param.ChargeCaptureParams.Destination.Builder();
    }

    public static class Builder {
      private Long amount;

      /** Finalize and obtain parameter instance from this builder. */
      public Destination build() {
        return new Destination(this.amount);
      }

      /**
       * The portion of this charge to send to the destination account. Must be less than or equal
       * to the captured amount of the charge.
       */
      public Builder setAmount(Long amount) {
        this.amount = amount;
        return this;
      }
    }
  }
}
