// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiRequestParams;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.Getter;

@Getter
public class AccountUpdateParams extends ApiRequestParams {
  /**
   * An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide
   * details to the account.
   */
  @SerializedName("account_token")
  String accountToken;

  /**
   * Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a
   * dictionary containing a user's bank account details.
   */
  @SerializedName("bank_account")
  Object bankAccount;

  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for this account (at
   * least 128px x 128px).
   */
  @SerializedName("business_logo")
  String businessLogo;

  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A larger logo for the
   * account that will be used in Checkout instead of the smaller logo and without the account's
   * name next to it if provided. Must be at least 128px x 128px.
   */
  @SerializedName("business_logo_large")
  String businessLogoLarge;

  /** The publicly sharable name for this account. */
  @SerializedName("business_name")
  String businessName;

  /** A CSS hex color value representing the primary branding color for this account. */
  @SerializedName("business_primary_color")
  String businessPrimaryColor;

  /** The URL that best shows the service or product provided by this account. */
  @SerializedName("business_url")
  String businessUrl;

  /**
   * A Boolean indicating whether Stripe should try to reclaim negative balances from an attached
   * bank account. For details, see [Understanding Connect Account
   * Balances](/docs/connect/account-balances).
   */
  @SerializedName("debit_negative_balances")
  Boolean debitNegativeBalances;

  /**
   * Account-level settings to automatically decline certain types of charges, regardless of the
   * card issuer's decision.
   */
  @SerializedName("decline_charge_on")
  DeclineChargeOn declineChargeOn;

  /**
   * Three-letter ISO currency code representing the default currency for the account. This must be
   * a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
   */
  @SerializedName("default_currency")
  String defaultCurrency;

  /**
   * Email address of the account representative. For Standard accounts, this is used to ask them to
   * claim their Stripe account. For Custom accounts, this only makes the account easier to identify
   * to platforms; Stripe does not email the account representative.
   */
  @SerializedName("email")
  String email;

  /** Specifies which fields in the response should be expanded. */
  @SerializedName("expand")
  List<String> expand;

  /**
   * A card or bank account to attach to the account. You can provide either a token, like the ones
   * returned by [Stripe.js](/docs/stripe.js), or a dictionary, as documented in the
   * `external_account` parameter for [bank account](/docs/api#account_create_bank_account)
   * creation. <br>
   * <br>
   * By default, providing an external account sets it as the new default external account for its
   * currency, and deletes the old default if one exists. To add additional external accounts
   * without replacing the existing default for the currency, use the bank account or card creation
   * API.
   */
  @SerializedName("external_account")
  Object externalAccount;

  /**
   * Information about the legal entity itself, including information about the associated account
   * representative.
   */
  @SerializedName("legal_entity")
  LegalEntity legalEntity;

  /**
   * A set of key-value pairs that you can attach to an `Account` object. This can be useful for
   * storing additional information about the account in a structured format.
   */
  @SerializedName("metadata")
  Map<String, String> metadata;

  /**
   * Details on when funds from charges are available, and when they are paid out to an external
   * account. For details, see our [Setting Bank and Debit Card
   * Payouts](/docs/connect/bank-transfers#payout-information) documentation.
   */
  @SerializedName("payout_schedule")
  PayoutSchedule payoutSchedule;

  /**
   * The text that appears on the bank account statement for payouts. If not set, this defaults to
   * the platform's bank descriptor as set in the Dashboard.
   */
  @SerializedName("payout_statement_descriptor")
  String payoutStatementDescriptor;

  /**
   * Internal-only description of the product sold or service provided by the business. It's used by
   * Stripe for risk and underwriting purposes.
   */
  @SerializedName("product_description")
  String productDescription;

  /**
   * The set of capabilities you want to unlock for this account. Each capability will be inactive
   * until you have provided its specific requirements and Stripe has verified them. An account may
   * have some of its requested capabilities be active and some be inactive.
   */
  @SerializedName("requested_capabilities")
  List<RequestedCapabilities> requestedCapabilities;

  /**
   * The default text that appears on credit card statements when a charge is made [directly on the
   * account](/docs/connect/direct-charges).
   */
  @SerializedName("statement_descriptor")
  String statementDescriptor;

  /** A publicly shareable support email address for the business. */
  @SerializedName("support_email")
  String supportEmail;

  /** A publicly shareable support phone number for the business. */
  @SerializedName("support_phone")
  String supportPhone;

  /** A publicly shareable URL that provides support for this account. */
  @SerializedName("support_url")
  String supportUrl;

  /**
   * Details on the account's acceptance of the [Stripe Services
   * Agreement](/docs/connect/updating-accounts#tos-acceptance).
   */
  @SerializedName("tos_acceptance")
  TosAcceptance tosAcceptance;

  private AccountUpdateParams(
      String accountToken,
      Object bankAccount,
      String businessLogo,
      String businessLogoLarge,
      String businessName,
      String businessPrimaryColor,
      String businessUrl,
      Boolean debitNegativeBalances,
      DeclineChargeOn declineChargeOn,
      String defaultCurrency,
      String email,
      List<String> expand,
      Object externalAccount,
      LegalEntity legalEntity,
      Map<String, String> metadata,
      PayoutSchedule payoutSchedule,
      String payoutStatementDescriptor,
      String productDescription,
      List<RequestedCapabilities> requestedCapabilities,
      String statementDescriptor,
      String supportEmail,
      String supportPhone,
      String supportUrl,
      TosAcceptance tosAcceptance) {
    this.accountToken = accountToken;
    this.bankAccount = bankAccount;
    this.businessLogo = businessLogo;
    this.businessLogoLarge = businessLogoLarge;
    this.businessName = businessName;
    this.businessPrimaryColor = businessPrimaryColor;
    this.businessUrl = businessUrl;
    this.debitNegativeBalances = debitNegativeBalances;
    this.declineChargeOn = declineChargeOn;
    this.defaultCurrency = defaultCurrency;
    this.email = email;
    this.expand = expand;
    this.externalAccount = externalAccount;
    this.legalEntity = legalEntity;
    this.metadata = metadata;
    this.payoutSchedule = payoutSchedule;
    this.payoutStatementDescriptor = payoutStatementDescriptor;
    this.productDescription = productDescription;
    this.requestedCapabilities = requestedCapabilities;
    this.statementDescriptor = statementDescriptor;
    this.supportEmail = supportEmail;
    this.supportPhone = supportPhone;
    this.supportUrl = supportUrl;
    this.tosAcceptance = tosAcceptance;
  }

  public static Builder builder() {
    return new com.stripe.param.AccountUpdateParams.Builder();
  }

  public static class Builder {
    private String accountToken;

    private Object bankAccount;

    private String businessLogo;

    private String businessLogoLarge;

    private String businessName;

    private String businessPrimaryColor;

    private String businessUrl;

    private Boolean debitNegativeBalances;

    private DeclineChargeOn declineChargeOn;

    private String defaultCurrency;

    private String email;

    private List<String> expand;

    private Object externalAccount;

    private LegalEntity legalEntity;

    private Map<String, String> metadata;

    private PayoutSchedule payoutSchedule;

    private String payoutStatementDescriptor;

    private String productDescription;

    private List<RequestedCapabilities> requestedCapabilities;

    private String statementDescriptor;

    private String supportEmail;

    private String supportPhone;

    private String supportUrl;

    private TosAcceptance tosAcceptance;

    /** Finalize and obtain parameter instance from this builder. */
    public AccountUpdateParams build() {
      return new AccountUpdateParams(
          this.accountToken,
          this.bankAccount,
          this.businessLogo,
          this.businessLogoLarge,
          this.businessName,
          this.businessPrimaryColor,
          this.businessUrl,
          this.debitNegativeBalances,
          this.declineChargeOn,
          this.defaultCurrency,
          this.email,
          this.expand,
          this.externalAccount,
          this.legalEntity,
          this.metadata,
          this.payoutSchedule,
          this.payoutStatementDescriptor,
          this.productDescription,
          this.requestedCapabilities,
          this.statementDescriptor,
          this.supportEmail,
          this.supportPhone,
          this.supportUrl,
          this.tosAcceptance);
    }

    /**
     * Add an element to `expand` list. A list is initialized for the first call, and subsequent
     * calls adds additional elements to the original list. See {@link AccountUpdateParams#expand}
     * for the field documentation.
     */
    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    /**
     * Add an element to `requestedCapabilities` list. A list is initialized for the first call, and
     * subsequent calls adds additional elements to the original list. See {@link
     * AccountUpdateParams#requestedCapabilities} for the field documentation.
     */
    public Builder addRequestedCapabilities(RequestedCapabilities element) {
      if (this.requestedCapabilities == null) {
        this.requestedCapabilities = new ArrayList<>();
      }
      this.requestedCapabilities.add(element);
      return this;
    }

    /**
     * Add a key/value pair to `metadata` map. A map is initialized for the first call, and
     * subsequent calls adds additional key/value pairs to the original map. See {@link
     * AccountUpdateParams#metadata} for the field documentation.
     */
    public Builder putMetadata(String key, String value) {
      if (this.metadata == null) {
        this.metadata = new HashMap<>();
      }
      this.metadata.put(key, value);
      return this;
    }

    /**
     * An [account token](https://stripe.com/docs/api#create_account_token), used to securely
     * provide details to the account.
     */
    public Builder setAccountToken(String accountToken) {
      this.accountToken = accountToken;
      return this;
    }

    /**
     * Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or
     * a dictionary containing a user's bank account details.
     */
    public Builder setBankAccount(String bankAccount) {
      this.bankAccount = bankAccount;
      return this;
    }

    /**
     * Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or
     * a dictionary containing a user's bank account details.
     */
    public Builder setBankAccount(Map<String, Object> bankAccount) {
      this.bankAccount = bankAccount;
      return this;
    }

    /**
     * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A larger logo for the
     * account that will be used in Checkout instead of the smaller logo and without the account's
     * name next to it if provided. Must be at least 128px x 128px.
     */
    public Builder setBusinessLogoLarge(String businessLogoLarge) {
      this.businessLogoLarge = businessLogoLarge;
      return this;
    }

    /**
     * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for this account
     * (at least 128px x 128px).
     */
    public Builder setBusinessLogo(String businessLogo) {
      this.businessLogo = businessLogo;
      return this;
    }

    /** The publicly sharable name for this account. */
    public Builder setBusinessName(String businessName) {
      this.businessName = businessName;
      return this;
    }

    /** A CSS hex color value representing the primary branding color for this account. */
    public Builder setBusinessPrimaryColor(String businessPrimaryColor) {
      this.businessPrimaryColor = businessPrimaryColor;
      return this;
    }

    /** The URL that best shows the service or product provided by this account. */
    public Builder setBusinessUrl(String businessUrl) {
      this.businessUrl = businessUrl;
      return this;
    }

    /**
     * A Boolean indicating whether Stripe should try to reclaim negative balances from an attached
     * bank account. For details, see [Understanding Connect Account
     * Balances](/docs/connect/account-balances).
     */
    public Builder setDebitNegativeBalances(Boolean debitNegativeBalances) {
      this.debitNegativeBalances = debitNegativeBalances;
      return this;
    }

    /**
     * Account-level settings to automatically decline certain types of charges, regardless of the
     * card issuer's decision.
     */
    public Builder setDeclineChargeOn(DeclineChargeOn declineChargeOn) {
      this.declineChargeOn = declineChargeOn;
      return this;
    }

    /**
     * Three-letter ISO currency code representing the default currency for the account. This must
     * be a currency that [Stripe supports in the account's
     * country](https://stripe.com/docs/payouts).
     */
    public Builder setDefaultCurrency(String defaultCurrency) {
      this.defaultCurrency = defaultCurrency;
      return this;
    }

    /**
     * Email address of the account representative. For Standard accounts, this is used to ask them
     * to claim their Stripe account. For Custom accounts, this only makes the account easier to
     * identify to platforms; Stripe does not email the account representative.
     */
    public Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    /**
     * A card or bank account to attach to the account. You can provide either a token, like the
     * ones returned by [Stripe.js](/docs/stripe.js), or a dictionary, as documented in the
     * `external_account` parameter for [bank account](/docs/api#account_create_bank_account)
     * creation. <br>
     * <br>
     * By default, providing an external account sets it as the new default external account for its
     * currency, and deletes the old default if one exists. To add additional external accounts
     * without replacing the existing default for the currency, use the bank account or card
     * creation API.
     */
    public Builder setExternalAccount(String externalAccount) {
      this.externalAccount = externalAccount;
      return this;
    }

    /**
     * A card or bank account to attach to the account. You can provide either a token, like the
     * ones returned by [Stripe.js](/docs/stripe.js), or a dictionary, as documented in the
     * `external_account` parameter for [bank account](/docs/api#account_create_bank_account)
     * creation. <br>
     * <br>
     * By default, providing an external account sets it as the new default external account for its
     * currency, and deletes the old default if one exists. To add additional external accounts
     * without replacing the existing default for the currency, use the bank account or card
     * creation API.
     */
    public Builder setExternalAccount(Map<String, Object> externalAccount) {
      this.externalAccount = externalAccount;
      return this;
    }

    /**
     * Information about the legal entity itself, including information about the associated account
     * representative.
     */
    public Builder setLegalEntity(LegalEntity legalEntity) {
      this.legalEntity = legalEntity;
      return this;
    }

    /**
     * Details on when funds from charges are available, and when they are paid out to an external
     * account. For details, see our [Setting Bank and Debit Card
     * Payouts](/docs/connect/bank-transfers#payout-information) documentation.
     */
    public Builder setPayoutSchedule(PayoutSchedule payoutSchedule) {
      this.payoutSchedule = payoutSchedule;
      return this;
    }

    /**
     * The text that appears on the bank account statement for payouts. If not set, this defaults to
     * the platform's bank descriptor as set in the Dashboard.
     */
    public Builder setPayoutStatementDescriptor(String payoutStatementDescriptor) {
      this.payoutStatementDescriptor = payoutStatementDescriptor;
      return this;
    }

    /**
     * Internal-only description of the product sold or service provided by the business. It's used
     * by Stripe for risk and underwriting purposes.
     */
    public Builder setProductDescription(String productDescription) {
      this.productDescription = productDescription;
      return this;
    }

    /**
     * The default text that appears on credit card statements when a charge is made [directly on
     * the account](/docs/connect/direct-charges).
     */
    public Builder setStatementDescriptor(String statementDescriptor) {
      this.statementDescriptor = statementDescriptor;
      return this;
    }

    /** A publicly shareable support email address for the business. */
    public Builder setSupportEmail(String supportEmail) {
      this.supportEmail = supportEmail;
      return this;
    }

    /** A publicly shareable support phone number for the business. */
    public Builder setSupportPhone(String supportPhone) {
      this.supportPhone = supportPhone;
      return this;
    }

    /** A publicly shareable URL that provides support for this account. */
    public Builder setSupportUrl(String supportUrl) {
      this.supportUrl = supportUrl;
      return this;
    }

    /**
     * Details on the account's acceptance of the [Stripe Services
     * Agreement](/docs/connect/updating-accounts#tos-acceptance).
     */
    public Builder setTosAcceptance(TosAcceptance tosAcceptance) {
      this.tosAcceptance = tosAcceptance;
      return this;
    }
  }

  @Getter
  public static class DeclineChargeOn {
    /**
     * Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This
     * setting only applies when a ZIP or postal code is provided and they fail bank verification.
     */
    @SerializedName("avs_failure")
    Boolean avsFailure;

    /**
     * Whether Stripe automatically declines charges with an incorrect CVC. This setting only
     * applies when a CVC is provided and it fails bank verification.
     */
    @SerializedName("cvc_failure")
    Boolean cvcFailure;

    private DeclineChargeOn(Boolean avsFailure, Boolean cvcFailure) {
      this.avsFailure = avsFailure;
      this.cvcFailure = cvcFailure;
    }

    public static Builder builder() {
      return new com.stripe.param.AccountUpdateParams.DeclineChargeOn.Builder();
    }

    public static class Builder {
      private Boolean avsFailure;

      private Boolean cvcFailure;

      /** Finalize and obtain parameter instance from this builder. */
      public DeclineChargeOn build() {
        return new DeclineChargeOn(this.avsFailure, this.cvcFailure);
      }

      /**
       * Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This
       * setting only applies when a ZIP or postal code is provided and they fail bank verification.
       */
      public Builder setAvsFailure(Boolean avsFailure) {
        this.avsFailure = avsFailure;
        return this;
      }

      /**
       * Whether Stripe automatically declines charges with an incorrect CVC. This setting only
       * applies when a CVC is provided and it fails bank verification.
       */
      public Builder setCvcFailure(Boolean cvcFailure) {
        this.cvcFailure = cvcFailure;
        return this;
      }
    }
  }

  @Getter
  public static class LegalEntity {
    /**
     * Information about anyone *besides* the account representative who owns at least 25% of the
     * legal entity. This field is required only for Singapore, Hong Kong, and
     * [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) member countries. For
     * details, see our [Handling Identity Verification with the
     * API](/docs/connect/identity-verification-api#additional-owners) documentation.
     */
    @SerializedName("additional_owners")
    Object additionalOwners;

    /** The address of the legal entity (i.e., individual or company). */
    @SerializedName("address")
    Address address;

    /** The Kana address variation for the legal entity (Japan only). */
    @SerializedName("address_kana")
    AddressKana addressKana;

    /** The Kanji address variation for the legal entity (Japan only). */
    @SerializedName("address_kanji")
    AddressKanji addressKanji;

    /** The legal name of the entity (companies only). */
    @SerializedName("business_name")
    String businessName;

    /** The Kana legal name variation for the company (Japan-based companies only). */
    @SerializedName("business_name_kana")
    String businessNameKana;

    /** The Kanji legal name variation for the company (Japan-based companies only). */
    @SerializedName("business_name_kanji")
    String businessNameKanji;

    /**
     * The business ID number of the legal entity (companies only), as appropriate for the company’s
     * country. (Examples are an Employer ID Number in the U.S., a Business Number in Canada, or a
     * Company Number in the UK.)
     */
    @SerializedName("business_tax_id")
    String businessTaxId;

    /** The VAT number of the legal entity (companies only). */
    @SerializedName("business_vat_id")
    String businessVatId;

    /**
     * The account representative's date of birth. Note that you must provide the entire date of
     * birth at the same time. You cannot, for example, provide only the year without also providing
     * the month and day.
     */
    @SerializedName("dob")
    Dob dob;

    /** The account representative's first name. */
    @SerializedName("first_name")
    String firstName;

    /** The Kana variation of the account representative's first name (Japan only). */
    @SerializedName("first_name_kana")
    String firstNameKana;

    /** The Kanji variation of the account representative's first name (Japan only). */
    @SerializedName("first_name_kanji")
    String firstNameKanji;

    /**
     * The gender of the account representative. Can be `male` or `female` (by international
     * regulations).
     */
    @SerializedName("gender")
    String gender;

    /** The account representative's last name. */
    @SerializedName("last_name")
    String lastName;

    /** The Kana varation of the account representative's last name (Japan only). */
    @SerializedName("last_name_kana")
    String lastNameKana;

    /** The Kanji varation of the account representative's last name (Japan only). */
    @SerializedName("last_name_kanji")
    String lastNameKanji;

    /** The account representative's maiden name. */
    @SerializedName("maiden_name")
    String maidenName;

    /** The account representative's personal address, used for verification. */
    @SerializedName("personal_address")
    PersonalAddress personalAddress;

    /**
     * The Kana address variation for the account representative, used for verification (Japan
     * only).
     */
    @SerializedName("personal_address_kana")
    PersonalAddressKana personalAddressKana;

    /**
     * The Kanji address variation for the account representative, used for verification (Japan
     * only).
     */
    @SerializedName("personal_address_kanji")
    PersonalAddressKanji personalAddressKanji;

    /**
     * The government-issued ID number of the account representative, as appropriate for the
     * representative’s country. (Examples are a Social Security Number in the U.S., or a Social
     * Insurance Number in Canada). Instead of the number itself, you can also provide a [PII token
     * created with Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).
     */
    @SerializedName("personal_id_number")
    String personalIdNumber;

    /** The legal entity's phone number, used for verification. */
    @SerializedName("phone_number")
    String phoneNumber;

    /** The last four digits of the account representative's Social Security Number (U.S. only). */
    @SerializedName("ssn_last_4")
    String ssnLast4;

    /**
     * The jurisdiction in which the `business_tax_id` is registered (Germany-based companies only).
     */
    @SerializedName("tax_id_registrar")
    String taxIdRegistrar;

    /** The legal entity type. Can be `individual` or `company`. */
    @SerializedName("type")
    String type;

    /** Information on the verification state of the account representative. */
    @SerializedName("verification")
    Verification verification;

    private LegalEntity(
        Object additionalOwners,
        Address address,
        AddressKana addressKana,
        AddressKanji addressKanji,
        String businessName,
        String businessNameKana,
        String businessNameKanji,
        String businessTaxId,
        String businessVatId,
        Dob dob,
        String firstName,
        String firstNameKana,
        String firstNameKanji,
        String gender,
        String lastName,
        String lastNameKana,
        String lastNameKanji,
        String maidenName,
        PersonalAddress personalAddress,
        PersonalAddressKana personalAddressKana,
        PersonalAddressKanji personalAddressKanji,
        String personalIdNumber,
        String phoneNumber,
        String ssnLast4,
        String taxIdRegistrar,
        String type,
        Verification verification) {
      this.additionalOwners = additionalOwners;
      this.address = address;
      this.addressKana = addressKana;
      this.addressKanji = addressKanji;
      this.businessName = businessName;
      this.businessNameKana = businessNameKana;
      this.businessNameKanji = businessNameKanji;
      this.businessTaxId = businessTaxId;
      this.businessVatId = businessVatId;
      this.dob = dob;
      this.firstName = firstName;
      this.firstNameKana = firstNameKana;
      this.firstNameKanji = firstNameKanji;
      this.gender = gender;
      this.lastName = lastName;
      this.lastNameKana = lastNameKana;
      this.lastNameKanji = lastNameKanji;
      this.maidenName = maidenName;
      this.personalAddress = personalAddress;
      this.personalAddressKana = personalAddressKana;
      this.personalAddressKanji = personalAddressKanji;
      this.personalIdNumber = personalIdNumber;
      this.phoneNumber = phoneNumber;
      this.ssnLast4 = ssnLast4;
      this.taxIdRegistrar = taxIdRegistrar;
      this.type = type;
      this.verification = verification;
    }

    public static Builder builder() {
      return new com.stripe.param.AccountUpdateParams.LegalEntity.Builder();
    }

    public static class Builder {
      private Object additionalOwners;

      private Address address;

      private AddressKana addressKana;

      private AddressKanji addressKanji;

      private String businessName;

      private String businessNameKana;

      private String businessNameKanji;

      private String businessTaxId;

      private String businessVatId;

      private Dob dob;

      private String firstName;

      private String firstNameKana;

      private String firstNameKanji;

      private String gender;

      private String lastName;

      private String lastNameKana;

      private String lastNameKanji;

      private String maidenName;

      private PersonalAddress personalAddress;

      private PersonalAddressKana personalAddressKana;

      private PersonalAddressKanji personalAddressKanji;

      private String personalIdNumber;

      private String phoneNumber;

      private String ssnLast4;

      private String taxIdRegistrar;

      private String type;

      private Verification verification;

      /** Finalize and obtain parameter instance from this builder. */
      public LegalEntity build() {
        return new LegalEntity(
            this.additionalOwners,
            this.address,
            this.addressKana,
            this.addressKanji,
            this.businessName,
            this.businessNameKana,
            this.businessNameKanji,
            this.businessTaxId,
            this.businessVatId,
            this.dob,
            this.firstName,
            this.firstNameKana,
            this.firstNameKanji,
            this.gender,
            this.lastName,
            this.lastNameKana,
            this.lastNameKanji,
            this.maidenName,
            this.personalAddress,
            this.personalAddressKana,
            this.personalAddressKanji,
            this.personalIdNumber,
            this.phoneNumber,
            this.ssnLast4,
            this.taxIdRegistrar,
            this.type,
            this.verification);
      }

      /**
       * Information about anyone *besides* the account representative who owns at least 25% of the
       * legal entity. This field is required only for Singapore, Hong Kong, and
       * [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) member countries. For
       * details, see our [Handling Identity Verification with the
       * API](/docs/connect/identity-verification-api#additional-owners) documentation.
       */
      public Builder setAdditionalOwners(List<AccountOwner> additionalOwners) {
        this.additionalOwners = additionalOwners;
        return this;
      }

      /**
       * Information about anyone *besides* the account representative who owns at least 25% of the
       * legal entity. This field is required only for Singapore, Hong Kong, and
       * [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) member countries. For
       * details, see our [Handling Identity Verification with the
       * API](/docs/connect/identity-verification-api#additional-owners) documentation.
       */
      public Builder setAdditionalOwners(Map<String, AccountOwner> additionalOwners) {
        this.additionalOwners = additionalOwners;
        return this;
      }

      /** The Kana address variation for the legal entity (Japan only). */
      public Builder setAddressKana(AddressKana addressKana) {
        this.addressKana = addressKana;
        return this;
      }

      /** The Kanji address variation for the legal entity (Japan only). */
      public Builder setAddressKanji(AddressKanji addressKanji) {
        this.addressKanji = addressKanji;
        return this;
      }

      /** The address of the legal entity (i.e., individual or company). */
      public Builder setAddress(Address address) {
        this.address = address;
        return this;
      }

      /** The Kana legal name variation for the company (Japan-based companies only). */
      public Builder setBusinessNameKana(String businessNameKana) {
        this.businessNameKana = businessNameKana;
        return this;
      }

      /** The Kanji legal name variation for the company (Japan-based companies only). */
      public Builder setBusinessNameKanji(String businessNameKanji) {
        this.businessNameKanji = businessNameKanji;
        return this;
      }

      /** The legal name of the entity (companies only). */
      public Builder setBusinessName(String businessName) {
        this.businessName = businessName;
        return this;
      }

      /**
       * The business ID number of the legal entity (companies only), as appropriate for the
       * company’s country. (Examples are an Employer ID Number in the U.S., a Business Number in
       * Canada, or a Company Number in the UK.)
       */
      public Builder setBusinessTaxId(String businessTaxId) {
        this.businessTaxId = businessTaxId;
        return this;
      }

      /** The VAT number of the legal entity (companies only). */
      public Builder setBusinessVatId(String businessVatId) {
        this.businessVatId = businessVatId;
        return this;
      }

      /**
       * The account representative's date of birth. Note that you must provide the entire date of
       * birth at the same time. You cannot, for example, provide only the year without also
       * providing the month and day.
       */
      public Builder setDob(Dob dob) {
        this.dob = dob;
        return this;
      }

      /** The Kana variation of the account representative's first name (Japan only). */
      public Builder setFirstNameKana(String firstNameKana) {
        this.firstNameKana = firstNameKana;
        return this;
      }

      /** The Kanji variation of the account representative's first name (Japan only). */
      public Builder setFirstNameKanji(String firstNameKanji) {
        this.firstNameKanji = firstNameKanji;
        return this;
      }

      /** The account representative's first name. */
      public Builder setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
      }

      /**
       * The gender of the account representative. Can be `male` or `female` (by international
       * regulations).
       */
      public Builder setGender(String gender) {
        this.gender = gender;
        return this;
      }

      /** The Kana varation of the account representative's last name (Japan only). */
      public Builder setLastNameKana(String lastNameKana) {
        this.lastNameKana = lastNameKana;
        return this;
      }

      /** The Kanji varation of the account representative's last name (Japan only). */
      public Builder setLastNameKanji(String lastNameKanji) {
        this.lastNameKanji = lastNameKanji;
        return this;
      }

      /** The account representative's last name. */
      public Builder setLastName(String lastName) {
        this.lastName = lastName;
        return this;
      }

      /** The account representative's maiden name. */
      public Builder setMaidenName(String maidenName) {
        this.maidenName = maidenName;
        return this;
      }

      /**
       * The Kana address variation for the account representative, used for verification (Japan
       * only).
       */
      public Builder setPersonalAddressKana(PersonalAddressKana personalAddressKana) {
        this.personalAddressKana = personalAddressKana;
        return this;
      }

      /**
       * The Kanji address variation for the account representative, used for verification (Japan
       * only).
       */
      public Builder setPersonalAddressKanji(PersonalAddressKanji personalAddressKanji) {
        this.personalAddressKanji = personalAddressKanji;
        return this;
      }

      /** The account representative's personal address, used for verification. */
      public Builder setPersonalAddress(PersonalAddress personalAddress) {
        this.personalAddress = personalAddress;
        return this;
      }

      /**
       * The government-issued ID number of the account representative, as appropriate for the
       * representative’s country. (Examples are a Social Security Number in the U.S., or a Social
       * Insurance Number in Canada). Instead of the number itself, you can also provide a [PII
       * token created with Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).
       */
      public Builder setPersonalIdNumber(String personalIdNumber) {
        this.personalIdNumber = personalIdNumber;
        return this;
      }

      /** The legal entity's phone number, used for verification. */
      public Builder setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
      }

      /**
       * The last four digits of the account representative's Social Security Number (U.S. only).
       */
      public Builder setSsnLast4(String ssnLast4) {
        this.ssnLast4 = ssnLast4;
        return this;
      }

      /**
       * The jurisdiction in which the `business_tax_id` is registered (Germany-based companies
       * only).
       */
      public Builder setTaxIdRegistrar(String taxIdRegistrar) {
        this.taxIdRegistrar = taxIdRegistrar;
        return this;
      }

      /** The legal entity type. Can be `individual` or `company`. */
      public Builder setType(String type) {
        this.type = type;
        return this;
      }

      /** Information on the verification state of the account representative. */
      public Builder setVerification(Verification verification) {
        this.verification = verification;
        return this;
      }
    }

    @Getter
    public static class AccountOwner {
      /** The personal address of the owner, used for verification. */
      @SerializedName("address")
      Address address;

      /**
       * The owner's date of birth. Note that you must provide the entire date of birth at the same
       * time. You cannot, for example, provide only the year without also providing month and day.
       */
      @SerializedName("dob")
      Dob dob;

      /** The owner's email. */
      @SerializedName("email")
      String email;

      /** The owner's first name. */
      @SerializedName("first_name")
      String firstName;

      /** The owner's last name. */
      @SerializedName("last_name")
      String lastName;

      /** The owner's maiden name. */
      @SerializedName("maiden_name")
      String maidenName;

      /**
       * The government-issued ID number of the account representative, as appropriate for the
       * representative’s country. (Examples are a Social Security Number in the U.S., or a Social
       * Insurance Number in Canada).
       */
      @SerializedName("personal_id_number")
      String personalIdNumber;

      /** The owner's phone number. */
      @SerializedName("phone")
      String phone;

      /** The last 4 digits of the owner's social security number. */
      @SerializedName("ssn_last_4")
      String ssnLast4;

      /**
       * Information on the verification state of the owner, including what information is needed
       * and by when.
       */
      @SerializedName("verification")
      Verification verification;

      private AccountOwner(
          Address address,
          Dob dob,
          String email,
          String firstName,
          String lastName,
          String maidenName,
          String personalIdNumber,
          String phone,
          String ssnLast4,
          Verification verification) {
        this.address = address;
        this.dob = dob;
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.maidenName = maidenName;
        this.personalIdNumber = personalIdNumber;
        this.phone = phone;
        this.ssnLast4 = ssnLast4;
        this.verification = verification;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.AccountOwner.Builder();
      }

      public static class Builder {
        private Address address;

        private Dob dob;

        private String email;

        private String firstName;

        private String lastName;

        private String maidenName;

        private String personalIdNumber;

        private String phone;

        private String ssnLast4;

        private Verification verification;

        /** Finalize and obtain parameter instance from this builder. */
        public AccountOwner build() {
          return new AccountOwner(
              this.address,
              this.dob,
              this.email,
              this.firstName,
              this.lastName,
              this.maidenName,
              this.personalIdNumber,
              this.phone,
              this.ssnLast4,
              this.verification);
        }

        /** The personal address of the owner, used for verification. */
        public Builder setAddress(Address address) {
          this.address = address;
          return this;
        }

        /**
         * The owner's date of birth. Note that you must provide the entire date of birth at the
         * same time. You cannot, for example, provide only the year without also providing month
         * and day.
         */
        public Builder setDob(Dob dob) {
          this.dob = dob;
          return this;
        }

        /** The owner's email. */
        public Builder setEmail(String email) {
          this.email = email;
          return this;
        }

        /** The owner's first name. */
        public Builder setFirstName(String firstName) {
          this.firstName = firstName;
          return this;
        }

        /** The owner's last name. */
        public Builder setLastName(String lastName) {
          this.lastName = lastName;
          return this;
        }

        /** The owner's maiden name. */
        public Builder setMaidenName(String maidenName) {
          this.maidenName = maidenName;
          return this;
        }

        /**
         * The government-issued ID number of the account representative, as appropriate for the
         * representative’s country. (Examples are a Social Security Number in the U.S., or a Social
         * Insurance Number in Canada).
         */
        public Builder setPersonalIdNumber(String personalIdNumber) {
          this.personalIdNumber = personalIdNumber;
          return this;
        }

        /** The owner's phone number. */
        public Builder setPhone(String phone) {
          this.phone = phone;
          return this;
        }

        /** The last 4 digits of the owner's social security number. */
        public Builder setSsnLast4(String ssnLast4) {
          this.ssnLast4 = ssnLast4;
          return this;
        }

        /**
         * Information on the verification state of the owner, including what information is needed
         * and by when.
         */
        public Builder setVerification(Verification verification) {
          this.verification = verification;
          return this;
        }
      }

      @Getter
      public static class Address {
        /** City, district, suburb, town, or village. */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        @SerializedName("country")
        String country;

        /** Address line 1 (e.g., street, PO Box, or company name). */
        @SerializedName("line1")
        String line1;

        /** Address line 2 (e.g., apartment, suite, unit, or building). */
        @SerializedName("line2")
        String line2;

        /** ZIP or postal code. */
        @SerializedName("postal_code")
        String postalCode;

        /** State, county, province, or region. */
        @SerializedName("state")
        String state;

        private Address(
            String city,
            String country,
            String line1,
            String line2,
            String postalCode,
            String state) {
          this.city = city;
          this.country = country;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
        }

        public static Builder builder() {
          return new com.stripe.param.AccountUpdateParams.LegalEntity.AccountOwner.Address
              .Builder();
        }

        public static class Builder {
          private String city;

          private String country;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          /** Finalize and obtain parameter instance from this builder. */
          public Address build() {
            return new Address(
                this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
          }

          /** City, district, suburb, town, or village. */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code ([ISO 3166-1
           * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /** Address line 1 (e.g., street, PO Box, or company name). */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /** Address line 2 (e.g., apartment, suite, unit, or building). */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /** ZIP or postal code. */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /** State, county, province, or region. */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }
        }
      }

      @Getter
      public static class Dob {
        /** The day of birth, between 1 and 31. */
        @SerializedName("day")
        Long day;

        /** The month of birth, between 1 and 12. */
        @SerializedName("month")
        Long month;

        /** The four-digit year of birth. */
        @SerializedName("year")
        Long year;

        private Dob(Long day, Long month, Long year) {
          this.day = day;
          this.month = month;
          this.year = year;
        }

        public static Builder builder() {
          return new com.stripe.param.AccountUpdateParams.LegalEntity.AccountOwner.Dob.Builder();
        }

        public static class Builder {
          private Long day;

          private Long month;

          private Long year;

          /** Finalize and obtain parameter instance from this builder. */
          public Dob build() {
            return new Dob(this.day, this.month, this.year);
          }

          /** The day of birth, between 1 and 31. */
          public Builder setDay(Long day) {
            this.day = day;
            return this;
          }

          /** The month of birth, between 1 and 12. */
          public Builder setMonth(Long month) {
            this.month = month;
            return this;
          }

          /** The four-digit year of birth. */
          public Builder setYear(Long year) {
            this.year = year;
            return this;
          }
        }
      }

      @Getter
      public static class Verification {
        /**
         * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a [file
         * upload](#create_file) with a `purpose` value of `identity_document`.
         */
        @SerializedName("document")
        String document;

        /** The verification status of the provided ID. */
        @SerializedName("status")
        Status status;

        private Verification(String document, Status status) {
          this.document = document;
          this.status = status;
        }

        public static Builder builder() {
          return new com.stripe.param.AccountUpdateParams.LegalEntity.AccountOwner.Verification
              .Builder();
        }

        public static class Builder {
          private String document;

          private Status status;

          /** Finalize and obtain parameter instance from this builder. */
          public Verification build() {
            return new Verification(this.document, this.status);
          }

          /**
           * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a
           * [file upload](#create_file) with a `purpose` value of `identity_document`.
           */
          public Builder setDocument(String document) {
            this.document = document;
            return this;
          }

          /** The verification status of the provided ID. */
          public Builder setStatus(Status status) {
            this.status = status;
            return this;
          }
        }

        public enum Status implements ApiRequestParams.Enum {
          @SerializedName("")
          EMPTY(""),

          @SerializedName("pending")
          PENDING("pending"),

          @SerializedName("unverified")
          UNVERIFIED("unverified"),

          @SerializedName("verified")
          VERIFIED("verified");

          @Getter private final String value;

          Status(String value) {
            this.value = value;
          }
        }
      }
    }

    @Getter
    public static class Address {
      /** City, district, suburb, town, or village. */
      @SerializedName("city")
      String city;

      /**
       * Two-letter country code ([ISO 3166-1
       * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       */
      @SerializedName("country")
      String country;

      /** Address line 1 (e.g., street, PO Box, or company name). */
      @SerializedName("line1")
      String line1;

      /** Address line 2 (e.g., apartment, suite, unit, or building). */
      @SerializedName("line2")
      String line2;

      /** ZIP or postal code. */
      @SerializedName("postal_code")
      String postalCode;

      /** State, county, province, or region. */
      @SerializedName("state")
      String state;

      private Address(
          String city,
          String country,
          String line1,
          String line2,
          String postalCode,
          String state) {
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.state = state;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.Address.Builder();
      }

      public static class Builder {
        private String city;

        private String country;

        private String line1;

        private String line2;

        private String postalCode;

        private String state;

        /** Finalize and obtain parameter instance from this builder. */
        public Address build() {
          return new Address(
              this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
        }

        /** City, district, suburb, town, or village. */
        public Builder setCity(String city) {
          this.city = city;
          return this;
        }

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        public Builder setCountry(String country) {
          this.country = country;
          return this;
        }

        /** Address line 1 (e.g., street, PO Box, or company name). */
        public Builder setLine1(String line1) {
          this.line1 = line1;
          return this;
        }

        /** Address line 2 (e.g., apartment, suite, unit, or building). */
        public Builder setLine2(String line2) {
          this.line2 = line2;
          return this;
        }

        /** ZIP or postal code. */
        public Builder setPostalCode(String postalCode) {
          this.postalCode = postalCode;
          return this;
        }

        /** State, county, province, or region. */
        public Builder setState(String state) {
          this.state = state;
          return this;
        }
      }
    }

    @Getter
    public static class AddressKana {
      /** City or ward. */
      @SerializedName("city")
      String city;

      /**
       * Two-letter country code ([ISO 3166-1
       * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       */
      @SerializedName("country")
      String country;

      /** Block or building number. */
      @SerializedName("line1")
      String line1;

      /** Building details. */
      @SerializedName("line2")
      String line2;

      /** Postal code. */
      @SerializedName("postal_code")
      String postalCode;

      /** Prefecture. */
      @SerializedName("state")
      String state;

      /** Town or cho-me. */
      @SerializedName("town")
      String town;

      private AddressKana(
          String city,
          String country,
          String line1,
          String line2,
          String postalCode,
          String state,
          String town) {
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.state = state;
        this.town = town;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.AddressKana.Builder();
      }

      public static class Builder {
        private String city;

        private String country;

        private String line1;

        private String line2;

        private String postalCode;

        private String state;

        private String town;

        /** Finalize and obtain parameter instance from this builder. */
        public AddressKana build() {
          return new AddressKana(
              this.city,
              this.country,
              this.line1,
              this.line2,
              this.postalCode,
              this.state,
              this.town);
        }

        /** City or ward. */
        public Builder setCity(String city) {
          this.city = city;
          return this;
        }

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        public Builder setCountry(String country) {
          this.country = country;
          return this;
        }

        /** Block or building number. */
        public Builder setLine1(String line1) {
          this.line1 = line1;
          return this;
        }

        /** Building details. */
        public Builder setLine2(String line2) {
          this.line2 = line2;
          return this;
        }

        /** Postal code. */
        public Builder setPostalCode(String postalCode) {
          this.postalCode = postalCode;
          return this;
        }

        /** Prefecture. */
        public Builder setState(String state) {
          this.state = state;
          return this;
        }

        /** Town or cho-me. */
        public Builder setTown(String town) {
          this.town = town;
          return this;
        }
      }
    }

    @Getter
    public static class AddressKanji {
      /** City or ward. */
      @SerializedName("city")
      String city;

      /**
       * Two-letter country code ([ISO 3166-1
       * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       */
      @SerializedName("country")
      String country;

      /** Block or building number. */
      @SerializedName("line1")
      String line1;

      /** Building details. */
      @SerializedName("line2")
      String line2;

      /** Postal code. */
      @SerializedName("postal_code")
      String postalCode;

      /** Prefecture. */
      @SerializedName("state")
      String state;

      /** Town or cho-me. */
      @SerializedName("town")
      String town;

      private AddressKanji(
          String city,
          String country,
          String line1,
          String line2,
          String postalCode,
          String state,
          String town) {
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.state = state;
        this.town = town;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.AddressKanji.Builder();
      }

      public static class Builder {
        private String city;

        private String country;

        private String line1;

        private String line2;

        private String postalCode;

        private String state;

        private String town;

        /** Finalize and obtain parameter instance from this builder. */
        public AddressKanji build() {
          return new AddressKanji(
              this.city,
              this.country,
              this.line1,
              this.line2,
              this.postalCode,
              this.state,
              this.town);
        }

        /** City or ward. */
        public Builder setCity(String city) {
          this.city = city;
          return this;
        }

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        public Builder setCountry(String country) {
          this.country = country;
          return this;
        }

        /** Block or building number. */
        public Builder setLine1(String line1) {
          this.line1 = line1;
          return this;
        }

        /** Building details. */
        public Builder setLine2(String line2) {
          this.line2 = line2;
          return this;
        }

        /** Postal code. */
        public Builder setPostalCode(String postalCode) {
          this.postalCode = postalCode;
          return this;
        }

        /** Prefecture. */
        public Builder setState(String state) {
          this.state = state;
          return this;
        }

        /** Town or cho-me. */
        public Builder setTown(String town) {
          this.town = town;
          return this;
        }
      }
    }

    @Getter
    public static class Dob {
      /** The day of birth, between 1 and 31. */
      @SerializedName("day")
      Long day;

      /** The month of birth, between 1 and 12. */
      @SerializedName("month")
      Long month;

      /** The four-digit year of birth. */
      @SerializedName("year")
      Long year;

      private Dob(Long day, Long month, Long year) {
        this.day = day;
        this.month = month;
        this.year = year;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.Dob.Builder();
      }

      public static class Builder {
        private Long day;

        private Long month;

        private Long year;

        /** Finalize and obtain parameter instance from this builder. */
        public Dob build() {
          return new Dob(this.day, this.month, this.year);
        }

        /** The day of birth, between 1 and 31. */
        public Builder setDay(Long day) {
          this.day = day;
          return this;
        }

        /** The month of birth, between 1 and 12. */
        public Builder setMonth(Long month) {
          this.month = month;
          return this;
        }

        /** The four-digit year of birth. */
        public Builder setYear(Long year) {
          this.year = year;
          return this;
        }
      }
    }

    @Getter
    public static class PersonalAddress {
      /** City, district, suburb, town, or village. */
      @SerializedName("city")
      String city;

      /**
       * Two-letter country code ([ISO 3166-1
       * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       */
      @SerializedName("country")
      String country;

      /** Address line 1 (e.g., street, PO Box, or company name). */
      @SerializedName("line1")
      String line1;

      /** Address line 2 (e.g., apartment, suite, unit, or building). */
      @SerializedName("line2")
      String line2;

      /** ZIP or postal code. */
      @SerializedName("postal_code")
      String postalCode;

      /** State, county, province, or region. */
      @SerializedName("state")
      String state;

      private PersonalAddress(
          String city,
          String country,
          String line1,
          String line2,
          String postalCode,
          String state) {
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.state = state;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.PersonalAddress.Builder();
      }

      public static class Builder {
        private String city;

        private String country;

        private String line1;

        private String line2;

        private String postalCode;

        private String state;

        /** Finalize and obtain parameter instance from this builder. */
        public PersonalAddress build() {
          return new PersonalAddress(
              this.city, this.country, this.line1, this.line2, this.postalCode, this.state);
        }

        /** City, district, suburb, town, or village. */
        public Builder setCity(String city) {
          this.city = city;
          return this;
        }

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        public Builder setCountry(String country) {
          this.country = country;
          return this;
        }

        /** Address line 1 (e.g., street, PO Box, or company name). */
        public Builder setLine1(String line1) {
          this.line1 = line1;
          return this;
        }

        /** Address line 2 (e.g., apartment, suite, unit, or building). */
        public Builder setLine2(String line2) {
          this.line2 = line2;
          return this;
        }

        /** ZIP or postal code. */
        public Builder setPostalCode(String postalCode) {
          this.postalCode = postalCode;
          return this;
        }

        /** State, county, province, or region. */
        public Builder setState(String state) {
          this.state = state;
          return this;
        }
      }
    }

    @Getter
    public static class PersonalAddressKana {
      /** City or ward. */
      @SerializedName("city")
      String city;

      /**
       * Two-letter country code ([ISO 3166-1
       * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       */
      @SerializedName("country")
      String country;

      /** Block or building number. */
      @SerializedName("line1")
      String line1;

      /** Building details. */
      @SerializedName("line2")
      String line2;

      /** Postal code. */
      @SerializedName("postal_code")
      String postalCode;

      /** Prefecture. */
      @SerializedName("state")
      String state;

      /** Town or cho-me. */
      @SerializedName("town")
      String town;

      private PersonalAddressKana(
          String city,
          String country,
          String line1,
          String line2,
          String postalCode,
          String state,
          String town) {
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.state = state;
        this.town = town;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.PersonalAddressKana.Builder();
      }

      public static class Builder {
        private String city;

        private String country;

        private String line1;

        private String line2;

        private String postalCode;

        private String state;

        private String town;

        /** Finalize and obtain parameter instance from this builder. */
        public PersonalAddressKana build() {
          return new PersonalAddressKana(
              this.city,
              this.country,
              this.line1,
              this.line2,
              this.postalCode,
              this.state,
              this.town);
        }

        /** City or ward. */
        public Builder setCity(String city) {
          this.city = city;
          return this;
        }

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        public Builder setCountry(String country) {
          this.country = country;
          return this;
        }

        /** Block or building number. */
        public Builder setLine1(String line1) {
          this.line1 = line1;
          return this;
        }

        /** Building details. */
        public Builder setLine2(String line2) {
          this.line2 = line2;
          return this;
        }

        /** Postal code. */
        public Builder setPostalCode(String postalCode) {
          this.postalCode = postalCode;
          return this;
        }

        /** Prefecture. */
        public Builder setState(String state) {
          this.state = state;
          return this;
        }

        /** Town or cho-me. */
        public Builder setTown(String town) {
          this.town = town;
          return this;
        }
      }
    }

    @Getter
    public static class PersonalAddressKanji {
      /** City or ward. */
      @SerializedName("city")
      String city;

      /**
       * Two-letter country code ([ISO 3166-1
       * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       */
      @SerializedName("country")
      String country;

      /** Block or building number. */
      @SerializedName("line1")
      String line1;

      /** Building details. */
      @SerializedName("line2")
      String line2;

      /** Postal code. */
      @SerializedName("postal_code")
      String postalCode;

      /** Prefecture. */
      @SerializedName("state")
      String state;

      /** Town or cho-me. */
      @SerializedName("town")
      String town;

      private PersonalAddressKanji(
          String city,
          String country,
          String line1,
          String line2,
          String postalCode,
          String state,
          String town) {
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.state = state;
        this.town = town;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.PersonalAddressKanji.Builder();
      }

      public static class Builder {
        private String city;

        private String country;

        private String line1;

        private String line2;

        private String postalCode;

        private String state;

        private String town;

        /** Finalize and obtain parameter instance from this builder. */
        public PersonalAddressKanji build() {
          return new PersonalAddressKanji(
              this.city,
              this.country,
              this.line1,
              this.line2,
              this.postalCode,
              this.state,
              this.town);
        }

        /** City or ward. */
        public Builder setCity(String city) {
          this.city = city;
          return this;
        }

        /**
         * Two-letter country code ([ISO 3166-1
         * alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
         */
        public Builder setCountry(String country) {
          this.country = country;
          return this;
        }

        /** Block or building number. */
        public Builder setLine1(String line1) {
          this.line1 = line1;
          return this;
        }

        /** Building details. */
        public Builder setLine2(String line2) {
          this.line2 = line2;
          return this;
        }

        /** Postal code. */
        public Builder setPostalCode(String postalCode) {
          this.postalCode = postalCode;
          return this;
        }

        /** Prefecture. */
        public Builder setState(String state) {
          this.state = state;
          return this;
        }

        /** Town or cho-me. */
        public Builder setTown(String town) {
          this.town = town;
          return this;
        }
      }
    }

    @Getter
    public static class Verification {
      /**
       * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a [file
       * upload](#create_file) with a `purpose` value of `identity_document`.
       */
      @SerializedName("document")
      String document;

      /** The verification status of the provided ID. */
      @SerializedName("status")
      Status status;

      private Verification(String document, Status status) {
        this.document = document;
        this.status = status;
      }

      public static Builder builder() {
        return new com.stripe.param.AccountUpdateParams.LegalEntity.Verification.Builder();
      }

      public static class Builder {
        private String document;

        private Status status;

        /** Finalize and obtain parameter instance from this builder. */
        public Verification build() {
          return new Verification(this.document, this.status);
        }

        /**
         * An [ID](/docs/connect/identity-verification-api#acceptable-id-types) returned by a [file
         * upload](#create_file) with a `purpose` value of `identity_document`.
         */
        public Builder setDocument(String document) {
          this.document = document;
          return this;
        }

        /** The verification status of the provided ID. */
        public Builder setStatus(Status status) {
          this.status = status;
          return this;
        }
      }

      public enum Status implements ApiRequestParams.Enum {
        @SerializedName("")
        EMPTY(""),

        @SerializedName("pending")
        PENDING("pending"),

        @SerializedName("unverified")
        UNVERIFIED("unverified"),

        @SerializedName("verified")
        VERIFIED("verified");

        @Getter private final String value;

        Status(String value) {
          this.value = value;
        }
      }
    }
  }

  @Getter
  public static class PayoutSchedule {
    /**
     * The number of days charge funds are held before being paid out. May also be set to `minimum`,
     * representing the lowest available value for the account country. Default is `minimum`. The
     * `delay_days` parameter does not apply when the `interval` is `manual`.
     */
    @SerializedName("delay_days")
    Object delayDays;

    /**
     * How frequently available funds are paid out. One of: `daily`, `manual`, `weekly`, or
     * `monthly`. Default is `daily`.
     */
    @SerializedName("interval")
    Interval interval;

    /**
     * The day of the month when available funds are paid out. Required and applicable only if
     * `interval` is `monthly`.
     */
    @SerializedName("monthly_anchor")
    Long monthlyAnchor;

    /**
     * The day of the week when available funds are paid out, specified as `monday`, `tuesday`, etc.
     * (required and applicable only if `interval` is `weekly`.)
     */
    @SerializedName("weekly_anchor")
    WeeklyAnchor weeklyAnchor;

    private PayoutSchedule(
        Object delayDays, Interval interval, Long monthlyAnchor, WeeklyAnchor weeklyAnchor) {
      this.delayDays = delayDays;
      this.interval = interval;
      this.monthlyAnchor = monthlyAnchor;
      this.weeklyAnchor = weeklyAnchor;
    }

    public static Builder builder() {
      return new com.stripe.param.AccountUpdateParams.PayoutSchedule.Builder();
    }

    public static class Builder {
      private Object delayDays;

      private Interval interval;

      private Long monthlyAnchor;

      private WeeklyAnchor weeklyAnchor;

      /** Finalize and obtain parameter instance from this builder. */
      public PayoutSchedule build() {
        return new PayoutSchedule(
            this.delayDays, this.interval, this.monthlyAnchor, this.weeklyAnchor);
      }

      /**
       * The number of days charge funds are held before being paid out. May also be set to
       * `minimum`, representing the lowest available value for the account country. Default is
       * `minimum`. The `delay_days` parameter does not apply when the `interval` is `manual`.
       */
      public Builder setDelayDays(DelayDays delayDays) {
        this.delayDays = delayDays;
        return this;
      }

      /**
       * The number of days charge funds are held before being paid out. May also be set to
       * `minimum`, representing the lowest available value for the account country. Default is
       * `minimum`. The `delay_days` parameter does not apply when the `interval` is `manual`.
       */
      public Builder setDelayDays(Long delayDays) {
        this.delayDays = delayDays;
        return this;
      }

      /**
       * How frequently available funds are paid out. One of: `daily`, `manual`, `weekly`, or
       * `monthly`. Default is `daily`.
       */
      public Builder setInterval(Interval interval) {
        this.interval = interval;
        return this;
      }

      /**
       * The day of the month when available funds are paid out. Required and applicable only if
       * `interval` is `monthly`.
       */
      public Builder setMonthlyAnchor(Long monthlyAnchor) {
        this.monthlyAnchor = monthlyAnchor;
        return this;
      }

      /**
       * The day of the week when available funds are paid out, specified as `monday`, `tuesday`,
       * etc. (required and applicable only if `interval` is `weekly`.)
       */
      public Builder setWeeklyAnchor(WeeklyAnchor weeklyAnchor) {
        this.weeklyAnchor = weeklyAnchor;
        return this;
      }
    }

    public enum DelayDays implements ApiRequestParams.Enum {
      @SerializedName("minimum")
      MINIMUM("minimum");

      @Getter private final String value;

      DelayDays(String value) {
        this.value = value;
      }
    }

    public enum Interval implements ApiRequestParams.Enum {
      @SerializedName("daily")
      DAILY("daily"),

      @SerializedName("four_times_monthly")
      FOUR_TIMES_MONTHLY("four_times_monthly"),

      @SerializedName("manual")
      MANUAL("manual"),

      @SerializedName("monthly")
      MONTHLY("monthly"),

      @SerializedName("weekly")
      WEEKLY("weekly");

      @Getter private final String value;

      Interval(String value) {
        this.value = value;
      }
    }

    public enum WeeklyAnchor implements ApiRequestParams.Enum {
      @SerializedName("friday")
      FRIDAY("friday"),

      @SerializedName("monday")
      MONDAY("monday"),

      @SerializedName("saturday")
      SATURDAY("saturday"),

      @SerializedName("sunday")
      SUNDAY("sunday"),

      @SerializedName("thursday")
      THURSDAY("thursday"),

      @SerializedName("tuesday")
      TUESDAY("tuesday"),

      @SerializedName("wednesday")
      WEDNESDAY("wednesday");

      @Getter private final String value;

      WeeklyAnchor(String value) {
        this.value = value;
      }
    }
  }

  @Getter
  public static class TosAcceptance {
    /**
     * The Unix timestamp marking when the account representative accepted the Stripe Services
     * Agreement.
     */
    @SerializedName("date")
    Long date;

    /**
     * The IP address from which the account representative accepted the Stripe Services Agreement.
     */
    @SerializedName("ip")
    String ip;

    /**
     * The user agent of the browser from which the account representative accepted the Stripe
     * Services Agreement.
     */
    @SerializedName("user_agent")
    String userAgent;

    private TosAcceptance(Long date, String ip, String userAgent) {
      this.date = date;
      this.ip = ip;
      this.userAgent = userAgent;
    }

    public static Builder builder() {
      return new com.stripe.param.AccountUpdateParams.TosAcceptance.Builder();
    }

    public static class Builder {
      private Long date;

      private String ip;

      private String userAgent;

      /** Finalize and obtain parameter instance from this builder. */
      public TosAcceptance build() {
        return new TosAcceptance(this.date, this.ip, this.userAgent);
      }

      /**
       * The Unix timestamp marking when the account representative accepted the Stripe Services
       * Agreement.
       */
      public Builder setDate(Long date) {
        this.date = date;
        return this;
      }

      /**
       * The IP address from which the account representative accepted the Stripe Services
       * Agreement.
       */
      public Builder setIp(String ip) {
        this.ip = ip;
        return this;
      }

      /**
       * The user agent of the browser from which the account representative accepted the Stripe
       * Services Agreement.
       */
      public Builder setUserAgent(String userAgent) {
        this.userAgent = userAgent;
        return this;
      }
    }
  }

  public enum RequestedCapabilities implements ApiRequestParams.Enum {
    @SerializedName("card_payments")
    CARD_PAYMENTS("card_payments"),

    @SerializedName("platform_payments")
    PLATFORM_PAYMENTS("platform_payments");

    @Getter private final String value;

    RequestedCapabilities(String value) {
      this.value = value;
    }
  }
}
